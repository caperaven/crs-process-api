async function a(n,r="context"){const s=`${r}:${n}`;if(crs.binding.functions.has(s)){const c=crs.binding.functions.get(s);return c.count+=1,c}const t=[],i=await crs.binding.expression.sanitize(n);if(n=i.expression.replaceAll("context.[","["),n.indexOf("?")==-1)return u(s,i,`return ${n}`,r);const e=n.split("?").map(c=>c.trim()),f=e[0],o=e[1].split(":");return t.push(`if (${f}) {`),t.push(`    return ${o[0].trim()};`),t.push("}"),o.length>1&&(t.push("else {"),t.push(`    return ${o[1].trim()};`),t.push("}")),u(s,i,t.join("\r"),r)}function u(n,r,s,t){const i={key:n,function:new crs.classes.AsyncFunction(t,s),parameters:r,count:1};return crs.binding.functions.set(n,i),i}crs.binding.expression.ifFactory=a;export{a as ifFactory};
