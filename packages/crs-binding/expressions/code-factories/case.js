async function p(s,t="context"){const r=`${t}:${s}`;if(crs.binding.functions.has(r)){const i=crs.binding.functions.get(r);return i.count+=1,i}const n=[],c=await crs.binding.expression.sanitize(s);s=f(c.expression);const e=s.split(",");for(let i of e){const o=i.split(":").map(a=>a.trim());o[0]=="context.default"?n.push(`return ${o[1]};`):(n.push(`if (${o[0]}) {`),n.push(`    return ${o[1]};`),n.push("}"))}const u={key:r,function:new crs.classes.AsyncFunction(t,n.join("\r").replaceAll("@",",")),parameters:c,count:1};return crs.binding.functions.set(r,u),u}function f(s){if(s.indexOf("[")==-1)return s;const t=[],r=s.split("[");for(const n of r){if(n.indexOf("]")==-1){t.push(n);continue}const c=n.split("]"),e=`[${c[0].replaceAll(",","@")}] ${c[1]}`;t.push(e)}return t.join("")}crs.binding.expression.caseFactory=p;export{p as caseFactory};
