class l{#e={};get events(){return this.#e}async on(t,s){let e=this.#e[t]||=[];e.indexOf(s)==-1&&e.push(s)}async emit(t,s){if(this.#e[t]){const e=this.#e[t];if(e.length==1)return await e[0](s);for(let i of e)await i(s)}}async remove(t,s){if(this.#e[t]){const e=this.#e[t],i=e.indexOf(s);i!=-1&&e.splice(i,1),e.length===0&&delete this.#e[t]}}async postMessage(t,s,e){const i=e||document,r=Array.from(i.querySelectorAll(t)),n=[];for(let o of r)n.push(o.onMessage.call(o,s));await Promise.all(n)}}(crs.binding.events||={}).emitter=new l;export{l as EventEmitter};
