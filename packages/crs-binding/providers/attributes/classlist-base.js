class c{#e={};get store(){return this.#e}async parse(e,s,i,a){const n=e.ownerElement;n.removeAttribute(e.name),crs.binding.utils.markElement(n,s);const t=await a(e.value);this.#e[n.__uuid]={classes:i,fnKey:t.key},crs.binding.data.setCallback(n.__uuid,s.bid,t.parameters.properties,this.providerKey)}async update(e){if(this.#e[e]==null)return;const s=crs.binding.elements[e],i=crs.binding.data.getDataForElement(s),a=this.#e[e],t=await crs.binding.functions.get(a.fnKey).function(i);if(s.classList.remove(...a.classes),t!=null){const r=Array.isArray(t)?t:[t];s.classList.add(...r)}}async clear(e){const s=this.#e[e];s!=null&&(s.classes=null,s.fnKey=null,delete this.#e[e])}}export{c as ClassListBase};
