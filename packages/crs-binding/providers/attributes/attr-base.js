class u{#e={};get store(){return this.#e}async parse(e,i,s){const a=e.name.split("."),t=e.ownerElement;t.removeAttribute(e.name);const r=a[0];crs.binding.utils.markElement(t,i);const o=await s(e.value),n=this.#e[t.__uuid]||={};n[r]=o.key,crs.binding.data.setCallback(t.__uuid,i.bid,o.parameters.properties,this.providerKey)}async update(e,...i){if(this.#e[e]==null)return;const s=crs.binding.elements[e],a=crs.binding.data.getDataForElement(s);for(const[t,r]of Object.entries(this.#e[e])){const n=await crs.binding.functions.get(r).function(a);if(r.indexOf("?")!==-1===!1){if(n===!1){s.removeAttribute(t);continue}s.setAttribute(t,t);continue}n!=null?s.setAttribute(t,n):s.removeAttribute(t)}}async clear(e){this.#e[e]!=null&&delete this.#e[e]}}export{u as AttrBase};
