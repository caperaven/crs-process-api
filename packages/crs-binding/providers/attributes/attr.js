class b{#t={};get store(){return this.#t}async parse(t,n){const o=t.name.split(".")[0],s=t.ownerElement;s.removeAttribute(t.name),crs.binding.utils.markElement(s,n);const e=await crs.binding.expression.compile(t.value),r=this.#t[s.__uuid]||={};for(const i of e.parameters.properties)r[i]={[o]:e.key};crs.binding.data.setCallback(s.__uuid,n.bid,e.parameters.properties,".attr")}async update(t,...n){if(this.#t[t]==null)return;const o=crs.binding.elements[t],s=crs.binding.data.getDataForElement(o),e=this.#t[t];n.length==0&&(n=Object.keys(e));for(const r of n){if(e[r]==null)continue;const i=Object.keys(e[r]);for(const c of i){const a=e[r][c],l=await crs.binding.functions.get(a).function(s);o.setAttribute(c,l)}}}async clear(t){const n=this.#t[t];if(n!=null){for(const o of Object.values(n))for(const s of Object.values(o)){const e=crs.binding.functions.get(s);crs.binding.expression.release(e)}delete this.#t[t]}}}export{b as default};
