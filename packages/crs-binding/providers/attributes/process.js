import{parseEvent as m}from"./utils/parse-event.js";class g{async onEvent(r,e,s){const n=await crs.binding.data.getContext(e);await v(s.value,r,n)}async parse(r){m(r,this.getIntent)}getIntent(r){return r.startsWith("{")?y(r):h(r)}async clear(r){crs.binding.eventStore.clear(r)}}function y(t){const r=t.split(",").map(c=>c.trim()),e=r[0].replace("type:","").replaceAll("'","").replace("{","").trim(),s=r[1].replace("action:","").replaceAll("'","").trim(),n=r.slice(2).join(","),a=o(n.slice(0,-1));return{provider:".process",value:{type:e,action:s,args:a}}}function h(t){const r=t.split("[").map(c=>c.trim()),e=r[0].trim(),s=r[1].split("(").map(c=>c.trim()),n=s[0].trim(),a=o(`{${s[1].replace(")]","")}}`);return{provider:".process",value:{schema:e,process:n,args:a}}}function o(t){let r=t.slice(1,-1).trim();if(r.length==0)return{};r=l(r);const e=r.split(","),s={};for(const n of e){const a=n.split(":").map(p=>p.trim()),i=a[0],c=d(a[1]);s[i]=c}return s}function d(t){return t.startsWith("[")?t.slice(1,-1).split("&44").map(r=>r.replaceAll("'","").trim()):t}function l(t,r=0){if(t.indexOf("[")===-1)return t;let e=t.indexOf("[",r);if(e===-1)return t;let s=t.indexOf("]",e);const n=t.substring(e,s+1),a=n.replaceAll(",","&44");return t=t.replace(n,a),l(t,s+1)}async function u(t,r,e){const s={};for(const[n,a]of Object.entries(t))if(Array.isArray(a)){const i=[];for(let c=0;c<a.length;c++)i[c]=await f(a[c],r,e);s[n]=i}else s[n]=await f(a,r,e);return s}async function f(t,r,e){if(typeof t!="string")return t;if(t=="$event")return r;if(t=="$context")return e;if(t.startsWith("$event.")){const s=t.replace("$event.","");return crs.binding.utils.getValueOnPath(r,s)}if(t.startsWith("$context.")){const s=t.replace("$context.","");return crs.binding.utils.getValueOnPath(e,s)}return t.startsWith("'")&&t.endsWith("'")&&(t=t.slice(1,-1)),t}async function v(t,r,e){if(t.schema!=null)return await A(t,r,e);const s=await u(t.args,r,e);await crs.call(t.type,t.action,s)}async function A(t,r,e){const s=await u(t.args,r,e),n={context:e,step:{action:t.process,args:{schema:t.schema}}};s!=null&&(n.parameters=s),await crs.binding.events.emitter.emit("run-process",n)}export{g as default};
