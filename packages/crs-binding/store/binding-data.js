class o{#r=1;#e={};#n={0:{name:"global",type:"data",data:{}}};#t={};#a={};#o(){const t=this.#r;return this.#r+=1,t}#s(t){return typeof t=="object"?t.bid:t}get globals(){return this.#n[0].data}async#i(t,e){if(this.#t[t]==null)return;const n=this.#t[t]?.[e];if(n!=null){for(const s of n.values())await crs.binding.providers.update(s,e);return}for(const s of Object.keys(this.#t[t]))s.indexOf(e)==0&&await this.#i(t,s)}setCallback(t,e,n,s){const a=this.#t[e]||={};for(const i of n){if(i.indexOf(GLOBALS)!==-1){this.setCallback(t,0,[i.replace(GLOBALS,"")],s);continue}a[i]==null&&(a[i]=new Set),a[i].add(t),this.#a[t]||=new Set,this.#a[t].add(s)}}addObject(t,e={}){const n=this.#o();return this.#n[n]={name:t,type:"data",data:e},this.#t[n]={},n}addContext(t,e){this.#e[t]=e}getContext(t){return this.#e[t]}getData(t){return t=this.#s(t),this.#n[t]}getCallbacks(t,e){const n=this.#t[t]?.[e];return n==null?[]:Array.from(n)}getDataForElement(t){const e=t?.__bid;return e==null?void 0:crs.binding.data.getData(e).data}remove(t){t=this.#s(t);const e=this.#e[t];if(e.boundElements!=null){for(const n of e.boundElements)delete this.#a[n];delete e.boundElements}crs.binding.utils.disposeProperties(this.#n[t]),crs.binding.utils.disposeProperties(this.#e[t]),delete this.#n[t],delete this.#e[t]}getProperty(t,e){return e.indexOf(GLOBALS)!==-1&&(t=0,e=e.replace(GLOBALS,"")),t=this.#s(t),crs.binding.utils.getValueOnPath(this.getData(t)?.data,e)}async setProperty(t,e,n){let s=e;s.indexOf(GLOBALS)!==-1&&(t=0,s=e.replace(GLOBALS,"")),t=this.#s(t),Array.isArray(n)&&(n.__bid=t,n.__property=s,n=(await import("./../proxies/array-proxy.js")).default(n)),crs.binding.utils.setValueOnPath(this.getData(t)?.data,s,n),await this.#i(t,s)}setName(t,e){t=this.#s(t);const n=crs.binding.data.getData(t);n.name=e}async updateElement(t){const e=t.__bid,n=t.__uuid;if(!(e==null||n==null))for(const s of Object.keys(this.#t[e]))await crs.binding.providers.update(n,s)}async updateContext(t){const e=this.getContext(t);if(!(e==null||e.boundElements==null))for(const n of e.boundElements){const s=this.#a[n];if(s==null)continue;const a=Array.from(s);await crs.binding.providers.updateProviders(n,...a)}}async updateUI(t,e){const n=this.getContext(t);n==null||n.boundElements==null||await this.#i(t,e)}}export{o as BindingData};
