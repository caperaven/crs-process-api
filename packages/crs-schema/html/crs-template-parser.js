var f=class{#t;#r=[];#s={};#e={};#a=[];#i;get options(){return this.#i}get providers(){return this.#s}get valueProcessors(){return this.#a}get managers(){return this.#e}get styleImports(){return this.#r}constructor(t,e){this.#t=t,this.#i=e||{}}async dispose(){for(let t of Object.keys(this.#s))await this.#s[t].dispose();for(let t of Object.keys(this.#e))await this.#e[t].dispose();this.#s=null,this.#e=null,this.#t=null,this.#a=null,this.#r=null,this.#i=0}async register(t){let e=new t(this);e.isManager==!0?(this.#e[e.key]=e,e.valueProcessor==!0&&this.#a.push(e)):this.#s[e.key]=e}async load(t){for(let e of t||[])await this.register((await import(e)).default)}async init(){for(let e of Object.keys(this.#e))await this.#e[e].reset?.();let t=Object.keys(this.schema);for(let e of t)e!=this.#i.root&&this.#e[e]!=null&&await this.#e[e].initialize(this.schema[e])}async processStyleImports(t){if(this.#r.length>0){let e=[];this.#r.forEach(s=>e.push(`@import "${s}";`)),t=`<style>${e.join(`
`)};</style>${t}`}return t}};var l=class{constructor(t){this.parser=t,this.isManager=!0}async dispose(){await this.reset(),delete this.parser}async assert(t,e,s){let r=t()==!0;return r&&e.push(s),!r}async reset(){}};var c=class extends l{get key(){return"templates"}async reset(){for(let t of this._parts||[])this[t]!=null&&(this[t]=null)}async initialize(){this._parts=[],await this._load("templates")}async _load(t){this[t]==null&&(this[t]={},this._parts.push(t));let e=this.parser.schema[t];for(let s of e)s.import==null?this[t][s.id]=s:await this._load(s.import)}async getTemplate(t,e){if(this[t][e]==null)throw new Error(`There is no template in the schema for with id "${e}"`);return this[t][e]}};async function v(a,t){let e=a;if(t.indexOf(".")==-1)return e[t];let s=t.split(".");for(let r=0;r<s.length-1;r++){let i=s[r];if(e=e[i],e==null)return null}return e[s[s.length-1]]}var p=class extends l{get key(){return"variables"}get valueProcessor(){return!0}async reset(){delete this.variables}async initialize(t){this.variables=t}async process(t){return this.getValue(t)}async getValue(t){return typeof t!="string"||t.trim()[0]!="@"?t:v(this.variables,t.slice(1))}};var n=class{#t;get parser(){return this.#t}constructor(t){this.#t=t}async dispose(){this.#t=null}async shouldParse(t){return!0}async process(t,e){this.styles!=null&&(t.styles=[]);let s=await this.#t.parseChildren?.(t,e),r=await this.#t.parseAttributes?.(t),i=await this.#t.parseStyles?.(t),o=await this.#t.parseContent?.(t);return{children:s,attributes:r,styles:i,content:o}}async setValues(t,e){let s=Object.keys(e);for(let r of s){let i=e[r]!=null?e[r]:"";t=t.split(r).join(i)}return t}async assert(t,e,s){let r=await t()==!0;return r&&e.push(s),!r}};var u=class extends n{get key(){return"body"}get template(){return"__content__"}async process(t,e){let s=await super.process(t,e);return await this.setValues(this.template,{__content__:s.children})}};var h=class extends n{get key(){return"raw"}get template(){return"<__element__ __attributes__ __styles__>__content__</__element__>"}async process(t,e){let s=await super.process(t);return await this.setValues(this.template,{__element__:e,__attributes__:s.attributes,__styles__:s.styles,__content__:s.children||s.content||""})}};var _=class extends n{get key(){return"template"}get template(){return`<div __attributes__ __classes__ >
                    __content__
                </div>`}async process(t,e){let s=this.parser.managers.templates;if(s==null)throw new Error("templates manager should be registered");let r=Object.getOwnPropertyNames(t).find(b=>b.toLowerCase().indexOf("template")!==-1),i=t[r];r=="template"&&(r="templates");let o=await s.getTemplate(r,i);t.elements=o.elements;let d=await super.process(t);return await this.setValues(this.template,{__attributes__:d.attributes,__classes__:d.styles,__content__:d.children})}async processTemplate(t){return(await super.process(t)).children}};var w='<svg xmlns:xlink="http://www.w3.org/1999/xlink"><use xlink:href="#__icon__"/></svg>';var y=class extends n{get key(){return"button"}get template(){return"<button __attributes__ __styles__>__content__</button>"}async process(t,e){let s=await super.process(t),r=await this.parser.parseStringValue(t.caption),i=t.icon==null?"":w.split("__icon__").join(t.icon),o=t.icon==null?`<span>${r}</span>`:`${i}<span>${r}</span>`;return await this.setValues(this.template,{__attributes__:s.attributes,__styles__:s.styles,__content__:o})}};var m=class extends f{constructor(t){super(t,{elementKey:"element",childrenKey:"elements",attributesKey:"attributes",stylesKey:"styles",root:"body",contentKey:"content"})}async dispose(){await super.dispose()}async initialize(){await this.register(c),await this.register(p),await this.register(u),await this.register(h),await this.register(_),await this.register(y)}async parseItem(t,e,s){if(t!=null)if(e=e||t[this.options.elementKey],this.providers[e]!=null){let r=this.providers[e];if(await r.shouldParse(t)!==!1)return r.process(t,s)}else{let r=this.providers.raw;if(r.shouldParse(t)!==!1)return r.process(t,e,s)}}async parseAttributes(t){let e=t[this.options.attributesKey];if(e==null)return null;let s=[];for(let r of Object.entries(e)){let i=r[0],o=r[1];o=await this.parseStringValue(o,i),s.push(`${i}="${o}"`)}return s.join(" ")}async parseStyles(t){let e=t[this.options.stylesKey];return e==null?null:(Array.isArray(e)&&(e=e.join(" ")),`class="${e}"`)}async parseChildren(t,e){let s=t[this.options.childrenKey];if(s==null)return null;let r=[];for(let i of s)r.push(await this.parseItem(i,null,e));return r.join("")}async parseContent(t){let e=t[this.options.contentKey];return e==null?null:this.parseStringValue(e)}async parseStringValue(t,e){for(let s of this.valueProcessors)t=await s.process(t,e);return t}};var g=class extends m{constructor(t,e){super(e),this.schema=t}async initialize(){await super.initialize(),await this.init()}async parse(t){let e={template:t},s=await this.providers.template.process(e);return s=await this.processStyleImports(s),s}async parseTemplate(t){let e=await this.providers.template.processTemplate(t);return e=await this.processStyleImports(e),e}};export{g as TemplateParser};
