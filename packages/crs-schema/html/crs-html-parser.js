var f=class{#t;#r=[];#e={};#s={};#a=[];#i;get options(){return this.#i}get providers(){return this.#e}get valueProcessors(){return this.#a}get managers(){return this.#s}get styleImports(){return this.#r}constructor(t,s){this.#t=t,this.#i=s||{}}async dispose(){for(let t of Object.keys(this.#e))await this.#e[t].dispose();for(let t of Object.keys(this.#s))await this.#s[t].dispose();this.#e=null,this.#s=null,this.#t=null,this.#a=null,this.#r=null,this.#i=0}async register(t){let s=new t(this);s.isManager==!0?(this.#s[s.key]=s,s.valueProcessor==!0&&this.#a.push(s)):this.#e[s.key]=s}async load(t){for(let s of t||[])await this.register((await import(s)).default)}async init(){for(let s of Object.keys(this.#s))await this.#s[s].reset?.();let t=Object.keys(this.schema);for(let s of t)s!=this.#i.root&&this.#s[s]!=null&&await this.#s[s].initialize(this.schema[s])}async processStyleImports(t){if(this.#r.length>0){let s=[];this.#r.forEach(e=>s.push(`@import "${e}";`)),t=`<style>${s.join(`
`)};</style>${t}`}return t}};var l=class{constructor(t){this.parser=t,this.isManager=!0}async dispose(){await this.reset(),delete this.parser}async assert(t,s,e){let r=t()==!0;return r&&s.push(e),!r}async reset(){}};var c=class extends l{get key(){return"templates"}async reset(){for(let t of this._parts||[])this[t]!=null&&(this[t]=null)}async initialize(){this._parts=[],await this._load("templates")}async _load(t){this[t]==null&&(this[t]={},this._parts.push(t));let s=this.parser.schema[t];for(let e of s)e.import==null?this[t][e.id]=e:await this._load(e.import)}async getTemplate(t,s){if(this[t][s]==null)throw new Error(`There is no template in the schema for with id "${s}"`);return this[t][s]}};async function v(a,t){let s=a;if(t.indexOf(".")==-1)return s[t];let e=t.split(".");for(let r=0;r<e.length-1;r++){let i=e[r];if(s=s[i],s==null)return null}return s[e[e.length-1]]}var p=class extends l{get key(){return"variables"}get valueProcessor(){return!0}async reset(){delete this.variables}async initialize(t){this.variables=t}async process(t){return this.getValue(t)}async getValue(t){return typeof t!="string"||t.trim()[0]!="@"?t:v(this.variables,t.slice(1))}};var o=class{#t;get parser(){return this.#t}constructor(t){this.#t=t}async dispose(){this.#t=null}async shouldParse(t){return!0}async process(t,s){this.styles!=null&&(t.styles=[]);let e=await this.#t.parseChildren?.(t,s),r=await this.#t.parseAttributes?.(t),i=await this.#t.parseStyles?.(t),n=await this.#t.parseContent?.(t);return{children:e,attributes:r,styles:i,content:n}}async setValues(t,s){let e=Object.keys(s);for(let r of e){let i=s[r]!=null?s[r]:"";t=t.split(r).join(i)}return t}async assert(t,s,e){let r=await t()==!0;return r&&s.push(e),!r}};var u=class extends o{get key(){return"body"}get template(){return"__content__"}async process(t,s){let e=await super.process(t,s);return await this.setValues(this.template,{__content__:e.children})}};var h=class extends o{get key(){return"raw"}get template(){return"<__element__ __attributes__ __styles__>__content__</__element__>"}async process(t,s){let e=await super.process(t);return await this.setValues(this.template,{__element__:s,__attributes__:e.attributes,__styles__:e.styles,__content__:e.children||e.content||""})}};var _=class extends o{get key(){return"template"}get template(){return`<div __attributes__ __classes__ >
                    __content__
                </div>`}async process(t,s){let e=this.parser.managers.templates;if(e==null)throw new Error("templates manager should be registered");let r=Object.getOwnPropertyNames(t).find(b=>b.toLowerCase().indexOf("template")!==-1),i=t[r];r=="template"&&(r="templates");let n=await e.getTemplate(r,i);t.elements=n.elements;let d=await super.process(t);return await this.setValues(this.template,{__attributes__:d.attributes,__classes__:d.styles,__content__:d.children})}async processTemplate(t){return(await super.process(t)).children}};var w='<svg xmlns:xlink="http://www.w3.org/1999/xlink"><use xlink:href="#__icon__"/></svg>';var y=class extends o{get key(){return"button"}get template(){return"<button __attributes__ __styles__>__content__</button>"}async process(t,s){let e=await super.process(t),r=await this.parser.parseStringValue(t.caption),i=t.icon==null?"":w.split("__icon__").join(t.icon),n=t.icon==null?`<span>${r}</span>`:`${i}<span>${r}</span>`;return await this.setValues(this.template,{__attributes__:e.attributes,__styles__:e.styles,__content__:n})}};var m=class extends f{constructor(t){super(t,{elementKey:"element",childrenKey:"elements",attributesKey:"attributes",stylesKey:"styles",root:"body",contentKey:"content"})}async dispose(){await super.dispose()}async initialize(){await this.register(c),await this.register(p),await this.register(u),await this.register(h),await this.register(_),await this.register(y)}async parseItem(t,s,e){if(t!=null)if(s=s||t[this.options.elementKey],this.providers[s]!=null){let r=this.providers[s];if(await r.shouldParse(t)!==!1)return r.process(t,e)}else{let r=this.providers.raw;if(r.shouldParse(t)!==!1)return r.process(t,s,e)}}async parseAttributes(t){let s=t[this.options.attributesKey];if(s==null)return null;let e=[];for(let r of Object.entries(s)){let i=r[0],n=r[1];n=await this.parseStringValue(n,i),e.push(`${i}="${n}"`)}return e.join(" ")}async parseStyles(t){let s=t[this.options.stylesKey];return s==null?null:(Array.isArray(s)&&(s=s.join(" ")),`class="${s}"`)}async parseChildren(t,s){let e=t[this.options.childrenKey];if(e==null)return null;let r=[];for(let i of e)r.push(await this.parseItem(i,null,s));return r.join("")}async parseContent(t){let s=t[this.options.contentKey];return s==null?null:this.parseStringValue(s)}async parseStringValue(t,s){for(let e of this.valueProcessors)t=await e.process(t,s);return t}};var g=class extends m{async addStyleImports(t){Array.isArray(t)?t.forEach(s=>this.styleImports.push(s)):this.styleImports.push(t)}async parse(t,s){if(this.schema=t,await this.init(),this.providers[this.options.root]==null)throw new Error(`schema requires a "${this.options.root}" option`);let e=t[this.options.root];if(e==null)throw new Error(`schema should have a property "${this.options.root}"`);let r=await this.providers[this.options.root].process(e,s);r=await this.processStyleImports(r);for(let i of Object.keys(this.managers))await this.managers[i].reset();return delete this.schema,r}};typeof self<"u"&&(self.crs=self.crs||{},self.crs.HTMLParser=g);export{g as HTMLParser};
