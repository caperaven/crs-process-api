[{"id":0,"href":"/docs/create/","title":"Create","section":"Docs","content":"\rCreating your own system\r#\rBasics\r#\rA system is a standard javascript class that contains static async functions.\nexport class MyActions { // this is a required function with required parameters static async perform(step, context, process, item) { await this[step.action](step, context, process, item); } } The \u0026ldquo;perform\u0026rdquo; function is called by the process runner and is required to be there.\nNow that you have the class you need to add it to the intent.\ncrs.intent.myactions = MyActions; Some systems don\u0026rsquo;t have functions and the \u0026ldquo;perform\u0026rdquo; function is sufficient.\nIn those cases you can read the intent from the step and execute it as required.\nLet\u0026rsquo;s add a function to \u0026ldquo;MyActions\u0026rdquo; and perform some standard operations.\nexport class MyActions { // this is a required function with required parameters static async perform(step, context, process, item) { await this[step.action](step, context, process, item); } static async do_something(step, context, process, item) { const value = crs.process.getValue(step.args.value, context, process, item); // .. so stuff const result = stuff(value); if (step.args.target != null) { crs.process.setValue(step.args.target, result, context, process, item); } return result; } } Some important things to note.\nDon\u0026rsquo;t assume that the args properties contains the final value. The value could be prefixed. Use crs.process.getValue. Always check if the step has a target set and if so, set the target using crs.process.setValue. Always return the result (if the step has one) so that you can use the step from JavaScript. Your function parameters should always contain the \u0026ldquo;step\u0026rdquo;, \u0026ldquo;context\u0026rdquo;, \u0026ldquo;process\u0026rdquo;, \u0026ldquo;item\u0026rdquo; parameters That is pretty much the basics of it.\nNext up we will look at some conventions for more complicated tasks.\nComplex operations\r#\rThere are times when the action you are executing has a lot of code too it.\nIn those cases you want to use the system\u0026rsquo;s function to extract information and call an external function or method passing on the required data as parameters.\nstatic async do_something(step, context, process, item) { const value1 = crs.process.getValue(step.args.value1, context, process, item); const value2 = crs.process.getValue(step.args.value2, context, process, item); const result = doComplexStuff(value1, value2); if (step.args.target != null) { crs.process.setValue(step.args.target, result, context, process, item); } return result; } Enable / Disable Feature\r#\rSome scenarios require a operations class.\nBefore you can use the required actions you need to enable the feature on a target object.\nOnce done you need to clean up the memory you instanciated.\nLet us assume we are writing a complex dom manipulation operation.\nSomething like writing custom interactions \u0026hellip;\nIn those cases your system will need an \u0026ldquo;enable\u0026rdquo; and \u0026ldquo;disable\u0026rdquo; function.\n\u0026ldquo;enable\u0026rdquo; initializes the resources required.\n\u0026ldquo;disable\u0026rdquo; cleans up those resources.\nexport class MyActions { static async perform(step, context, process, item) { await this[step.action](step, context, process, item); } static async enable(step, context, process, item) { const element = getElement(step.args.element); element._manager = new ElementManager(); } static async disable(step, context, process, item) { element._manager = element._manager.dispose(); } } Note that in the above example, manager.dispose() returns null.\nThat way you can dispose the resources in one line, including setting the field \u0026ldquo;_manager\u0026rdquo; to null;\nInitialize Feature\r#\rIn the scenario where you want to perform some initialization that does not involve instantiating memory, use the init function instead.\nexport class MyActions { static async perform(step, context, process, item) { await this[step.action](step, context, process, item); } static async init(step, context, process, item) { const element = getElement(step.args.element); element.style.display = \u0026#34;grid\u0026#34;; } static async add_rows(step, context, process, item) { const element = getElement(step.args.element); // .. do stuff } } In the above example you need to ensure that the element is a css grid or the other actions will not work correctly. It is up to the user to first init the relevant element before executing actions on it.\n"},{"id":1,"href":"/docs/example/","title":"Example","section":"Docs","content":"\rJSON schema processes example\r#\r{ \u0026#34;id\u0026#34;: \u0026#34;my_schema_id\u0026#34;, \u0026#34;process1\u0026#34;: { \u0026#34;parameters_def\u0026#34;: { \u0026#34;bId\u0026#34; : { type: \u0026#34;number\u0026#34;, required: true }, \u0026#34;taskId\u0026#34; : { type: \u0026#34;string\u0026#34;, required: true }, }, \u0026#34;data\u0026#34;: { \u0026#34;count\u0026#34;: 10 }, \u0026#34;steps\u0026#34;: { \u0026#34;start\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;math\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;add\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;value1\u0026#34;: \u0026#34;$data.count\u0026#34;, \u0026#34;value2\u0026#34;: 20, \u0026#34;target\u0026#34;: \u0026#34;$data.count\u0026#34; }, \u0026#34;binding_before\u0026#34;: { \u0026#34;currentStep\u0026#34;: \u0026#34;adding values\u0026#34; }, \u0026#34;next_step\u0026#34;: \u0026#34;print\u0026#34; }, \u0026#34;print\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;console\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;log\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;message\u0026#34;: \u0026#34;$data.count\u0026#34; } \u0026#34;binding_before\u0026#34;: { \u0026#34;currentStep\u0026#34;: \u0026#34;logging values\u0026#34; }, } } } } Schema Parts\r#\rA schema can have more than one process.\nThe schema should have an id property that uniquely identifies the schema.\nWhen you call processes from other processes this id is used as a reference on where to look for the process you defined.\nAll other properties on the schema are processes where the property name is the schema name.\nIn the above example we have a schema with the name \u0026ldquo;process1\u0026rdquo;\nProcess Parts\r#\rThe purpose of this example is not to be exhaustive but an overview of the core parts.\nSee the system documentation for details on particular steps.\nSome steps my differ slightly from this example, but the fast majority follows the same pattern.\nparameters_def\r#\rOptional property set if you want to pass data onto a process.\nThis is done when the execution of the process requires additional, external information.\n\u0026ldquo;parameters_def\u0026rdquo; defines what the parameters object on the process will contain.\nTo access the parameter values, use the \u0026ldquo;$parameters\u0026rdquo; prefix.\ndata\r#\rOptional property where you can store data during the execution of the process. To access the parameter values, use the \u0026ldquo;$data\u0026rdquo; prefix.\nsteps\r#\rEvery process must have a \u0026ldquo;steps\u0026rdquo; property.\nThis object must also have a \u0026ldquo;start\u0026rdquo; property.\nWhen a process is executed it always executes \u0026ldquo;start\u0026rdquo; first.\nEach property on the \u0026ldquo;steps\u0026rdquo; object defines a process step.\nThe property name defines the step name.\nUse the step name in the \u0026ldquo;next_step\u0026rdquo;, \u0026ldquo;pass_step\u0026rdquo; and \u0026ldquo;fail_step\u0026rdquo; properties.\nSee the conditions system for details on the \u0026ldquo;pass_step\u0026rdquo; and \u0026ldquo;fail_step\u0026rdquo; usage.\nstep parts\r#\rtype\r#\rThis is a required property. Type defines the intent type you want to execute. This could be array functions, data actions, anything on the crs.intent object.\nIn the start step we want to use the \u0026ldquo;math\u0026rdquo; intent actions.\nIn the log step we use the \u0026ldquo;console\u0026rdquo; intent actions.\naction\r#\rThis is mostly required but on special cases not required. The action property defines the function on the intent that you want to execute.\nIn the start step we want to call the \u0026ldquo;add\u0026rdquo; function and in the console step we want to call the \u0026ldquo;log\u0026rdquo; function. The action property is on most intent systems but not all.\nAction and condition for example do not have intent actions, so the action property is omitted.\nargs\r#\rThis is a required property. The args object defines the parameters used by intent actions to execute the intent.\nThe properties will differ from intent to intent but, there are a number of standard ones.\nWhen creating new systems it is important to retain the standard names for consistency purposes.\nsource: the origin of data to use target: the destination where the result must be copied too binding_after\r#\rThis is an optional property. crs-process-api uses crs-binding under the hood and allows binding access as part of your process execution.\nThis is often used to:\nUpdate UI Get data from binding contexts Set data on binding contexts binding_after is used for setting properties on the binding context.\nFor this to work you must have the \u0026ldquo;bId\u0026rdquo; parameter defined on the process.\nSee the parameter_def property for details.\nThis binding operation happens after the step has executed.\nbinding_before\r#\rThis is the same as binding_after except, it executes before the step is run.\nnext_step\r#\rThis defines the next step on the same process to execute.\nIf no next_step is defined the process will end at the end of the current step.\n"},{"id":2,"href":"/docs/prefixes/","title":"Prefixes","section":"Docs","content":"\rPrefixes\r#\rPrefixes are shortcuts helping with keeping pathing shorter.\nThere are a number of default prefixes, but you can also add your own.\nPrefixes are on the process object. When you look at calling intent there are a number of standard parameters you need to pass in, though not all are required all the time. Process is one of those parameters if you call it form javascript.\nWhen executing processes using the JSON schema, the process running will pass on the process by default.\nSee the example schema on how they are used.\nExisting \u0026ldquo;system\u0026rdquo; prefixes\r#\rThere are a number of default prefixes that is defined by the system.\nPrefix Path / Target Description $context context object as per parameter $process process object as per parameter $item item object as per parameter $text $process.text placeholder for text you want to refer to in steps $data $process.data place where you can store process data while process is running $parameters $process.parameters if a process has parameters and, you want to access a parameter in a step $bId $process.parameters.bId crs-binding context id that was passed on as a parameter $global globalThis certain systems allow access to global objects "},{"id":3,"href":"/docs/systems/actions/","title":"Actions","section":"Docs","content":"\rActions System\r#\rThis allows you to execute functions on either the context, process or item.\nMost often it is used to execute a function on the context or a path based on the context. This is one of those example where it makes more sense from a schema perspective.\nproperty description required parameters array of values passed in as parameters false json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;action\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;$context.log\u0026#34;, \u0026#34;args\u0026#34;: { parameters: [\u0026#34;hello world\u0026#34;] } } javascript\nconst result = crs.call(\u0026#34;action\u0026#34;, \u0026#34;$context.log\u0026#34;, { parameters: [\u0026#34;hello world\u0026#34;] }, context) "},{"id":4,"href":"/docs/systems/array/","title":"Array","section":"Docs","content":"\rArray\r#\rWorking with array features.\nFor the most part performing array actions in javascript is simple enough and, you don\u0026rsquo;t need to use the process api for this. The documentation will show how you could use the api to do it but know that the main goal here was for the execution using json schema. The source or target properties that refers to arrays can be either a path or an array object.\nActions\r#\radd field_to_csv concat change_values get_value map_objects get_records get_range calculate_paging add\r#\rAdd an item to an existing array.\nproperties\nproperty description required target the array to add too true value the value to add to the array true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;add\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;target\u0026#34;: \u0026#34;$context.collection\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;item\u0026#34; } } javascript\ncrs.call(\u0026#34;array\u0026#34;, \u0026#34;add\u0026#34;, { target: \u0026#34;$context.collection\u0026#34;, value: \u0026#34;item\u0026#34; }, context); field_to_csv\r#\rConvert an array of objects to a string of values separated by a delimiter.\nproperties\nproperty description required source array of objects that must be converted true target where the result is copied too schema delimiter the separator between the values true field the field who\u0026rsquo;s value will make up the result true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;field_to_csv\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;source\u0026#34; : \u0026#34;$context.collection\u0026#34;, \u0026#34;target\u0026#34; : \u0026#34;$context.csv\u0026#34;, \u0026#34;delimiter\u0026#34; : \u0026#34;;\u0026#34;, \u0026#34;field\u0026#34; : \u0026#34;value\u0026#34; } } javascript\nconst result = crs.call(\u0026#34;array\u0026#34;, \u0026#34;field_to_csv\u0026#34;, { source : \u0026#34;$context.collection\u0026#34;, delimiter : \u0026#34;;\u0026#34;, field : \u0026#34;value\u0026#34; }, context) concat\r#\rCombine two or more arrays into one.\nproperty description required sources array of paths for arrays to combine true target where the result is copied too schema json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;concat\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;sources\u0026#34;: [\u0026#34;$context.collection1\u0026#34;, \u0026#34;$context.collection1\u0026#34;], \u0026#34;target\u0026#34; : \u0026#34;$context.result\u0026#34; } } javascript\nconst result = crs.call(\u0026#34;array\u0026#34;, \u0026#34;concat\u0026#34;, { sources: [\u0026#34;$context.collection1\u0026#34;, \u0026#34;$context.collection1\u0026#34;], }, context) change_values\r#\rLoop through a defined array and change each item\u0026rsquo;s properties as defined.\nproperty description required sources array to change true changes object that defines the values to change true The changes object represents a key value pair of changes to be made.\nYou can define N properties this way.\njson\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;change_values\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;sources\u0026#34;: \u0026#34;$context.collection\u0026#34;, \u0026#34;changes\u0026#34;: { value1: 10, status: \u0026#34;done\u0026#34; } } } javascript const result = crs.call(\u0026#34;array\u0026#34;, \u0026#34;change_values\u0026#34;, { sources: \u0026#34;$context.collection\u0026#34;, changes: { value1: 10, status: \u0026#34;done\u0026#34; } }, context)\nAt the end of this, each item in the array will have a value1 of 10 and a status of \u0026ldquo;done\u0026rdquo;.\nget_value\r#\rGiven an array of objects, get the value of a property from the object at the defined position.\nproperty description required source array to work with true index index of the object to get the value from true field the field name to get the value from true target where the result is copied too schema json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;get_value\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;sources\u0026#34; : \u0026#34;$context.collection\u0026#34;, \u0026#34;index\u0026#34; : 0, \u0026#34;field\u0026#34; : \u0026#34;value\u0026#34;, \u0026#34;target\u0026#34; : \u0026#34;$context.value\u0026#34; } } javascript const result = crs.call(\u0026#34;array\u0026#34;, \u0026#34;get_value\u0026#34;, { sources : \u0026#34;$context.collection\u0026#34;, index : 0, field : \u0026#34;value\u0026#34;, }, context)\nmap_objects\r#\rGiven an array of objects, get an array values back based on a given fields.\nThe resulting array is a flat list of values. Consider the following array of objects.\nconst values = [ { v1: 1, v2: 2, v3: 3 }, { v1: 4, v2: 5, v3: 6 }, { v1: 7, v2: 8, v3: 9 } ]; If we map it out using properties: \u0026ldquo;v1\u0026rdquo; and \u0026ldquo;v3\u0026rdquo; the result will contain both the values of \u0026ldquo;v1\u0026rdquo; and \u0026ldquo;v3\u0026rdquo;. [1, 3, 4, 6, 7, 9];\nproperty description required source array to work with true fields array of field names true target where the result is copied too schema json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;map_objects\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;source\u0026#34; : \u0026#34;$context.collection\u0026#34;, \u0026#34;fields\u0026#34; : [\u0026#34;v1\u0026#34;, \u0026#34;v3\u0026#34;], \u0026#34;target\u0026#34; : \u0026#34;$context.value\u0026#34; } } javascript\nconst result = crs.call(\u0026#34;array\u0026#34;, \u0026#34;map_objects\u0026#34;, { source : \u0026#34;$context.collection\u0026#34;, fields : [\u0026#34;v1\u0026#34;, \u0026#34;v3\u0026#34;] }, context) get_range\r#\rThis function gets the min and max value from an array of objects.\nThe result is an object literal with a \u0026ldquo;min\u0026rdquo; and \u0026ldquo;max\u0026rdquo; property.\nproperty description required source array to work with true field field to get value from true target where the result is copied too schema json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;get_range\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;source\u0026#34; : \u0026#34;$context.collection\u0026#34;, \u0026#34;field\u0026#34; : \u0026#34;value\u0026#34;, \u0026#34;target\u0026#34; : \u0026#34;$context.range\u0026#34; } } javascript\nconst result = crs.call(\u0026#34;array\u0026#34;, \u0026#34;get_range\u0026#34;, { source : \u0026#34;$context.collection\u0026#34;, field : \u0026#34;value, }, context) get_records\r#\rThis function gets a batch of records from a source array.\nYou can use this function in conjunction with calculate_paging.\nproperty description required source array to work with true page_number what is the page number you want to get true page_size how big is a page true target where the result is copied too schema json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;get_records\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;source\u0026#34; : \u0026#34;$context.collection\u0026#34;, \u0026#34;page_number\u0026#34; : 1, \u0026#34;page_size\u0026#34; : 10 \u0026#34;target\u0026#34; : \u0026#34;$context.page\u0026#34; } } javascript\nconst result = crs.call(\u0026#34;array\u0026#34;, \u0026#34;get_records\u0026#34;, { source : \u0026#34;$context.collection\u0026#34;, page_number : 1, page_size : 10 }, context) calculate_paging\r#\rCalculate the paging of a given collection.\nThe result is an object literal with two properties.\nrecord_count page_count You can use this to manage getting batches of records for virtualization.\nproperty description required source array to work with true page_size how big is a page true target where the result is copied too schema json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;calculate_paging\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;source\u0026#34; : \u0026#34;$context.collection\u0026#34;, \u0026#34;page_size\u0026#34; : 10, \u0026#34;target\u0026#34; : \u0026#34;$context.size\u0026#34; } } javascript\nconst result = crs.call(\u0026#34;array\u0026#34;, \u0026#34;calculate_paging\u0026#34;, { source : \u0026#34;$context.collection\u0026#34;, page_size : 10 }, context) "},{"id":5,"href":"/docs/systems/binding/","title":"Binding","section":"Docs","content":"\rBinding\r#\rThis allows you to work more directly with crs-binding features.\nWe are not going to explain binding features here, you can read the binding documentation for more about that.\nActions\r#\rcreate_context free_context get_property set_property get_data set_errors create_context\r#\rBinding contexts are used when you have UI in your process.\nIf you don\u0026rsquo;t have an existing context to lean on you can create one.\nThis means that when you set a template, you can pass the context on.\nThis is generally referred to as the bId and, you can pass this to other processes using the process parameters. By using this function the resulting bId is automatically added to the process.parameters.bId property. From that point forward you can refer to that value using the $bId prefix.\nproperty description required defaults too context_id name of the context to be used false process_context json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;binding\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;create_context\u0026#34;, \u0026#34;args\u0026#34;: { context_id: \u0026#34;my_context\u0026#34; } } javascript\nThis is not really recommended.\nIf you really need to use this, call the binding engine directly.\rfree_context\r#\rThis removes the binding context created using create_context.\nThis function assumes that the process has a parameter called bId.\rjson\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;binding\u0026#34;, \u0026#34;action\u0026#34; : \u0026#34;free_context\u0026#34; } javascript\nUse binding engine directly\rget_property\r#\rGet the property value for a given property on the current process binding context.\nThis function assumes that the process has a parameter called bId.\rproperty description required property property name to get the value from true target where the result is copied too schema \u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;binding\u0026#34;, \u0026#34;action\u0026#34; : \u0026#34;get_property\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;property\u0026#34;: \u0026#34;code\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;$context.code\u0026#34; } } javascript\nUse binding engine directly\rset_property\r#\rSet the property value for a given property on the current process binding context.\nThis function assumes that the process has a parameter called bId.\rproperty description required property property name to set the value on true value the value to set on the property true \u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;binding\u0026#34;, \u0026#34;action\u0026#34; : \u0026#34;set_property\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;property\u0026#34;: \u0026#34;code\u0026#34;, \u0026#34;value\u0026#34; : \u0026#34;$context.code\u0026#34; } } javascript\nUse binding engine directly\rget_data\r#\rGet the binding data object for the current process binding context.\nThis function assumes that the process has a parameter called bId.\rproperty description required target where the result is copied too schema \u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;binding\u0026#34;, \u0026#34;action\u0026#34; : \u0026#34;get_data\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;target\u0026#34;: \u0026#34;$context.data\u0026#34; } } javascript\nUse binding engine directly\rset_errors\r#\rSave a list of errors to the current binding context using either a defined store name or \u0026ldquo;errors\u0026rdquo;.\nThis is mostly used when you have UI that you want to bind errors too.\nThis function assumes that the process has a parameter called bId.\rproperty description required default value store property name that will contain errors on the current binding context false \u0026ldquo;errors\u0026rdquo; source an array of error message strings true \u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;binding\u0026#34;, \u0026#34;action\u0026#34; : \u0026#34;set_errors\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;target\u0026#34;: \u0026#34;$context.data\u0026#34; } } javascript\nUse binding engine directly\r"},{"id":6,"href":"/docs/systems/condition/","title":"Condition","section":"Docs","content":"\rCondition\r#\rThis allows you to run if statements in the process.\nFrom a javascript perspective you should not be using this.\nSince this is meant for schema driven processes, all the examples will be json only.\nConditions is one of those special cases again where it does not have functions.\nExpressions\r#\rThe first thing you need to understand is that we try and follow a javascript syntax for expressions.\nThe expressions result in a boolean true or false.\nIf the result of the expression is true the pass_step will be executed.\nIf the expression is false the fail_step will be executed.\nAll the standard prefixes still apply.\nsimple example $context.isValid == true \u0026amp;\u0026amp; $context.value \u0026gt; 10\nmore complex example ($item.code == \u0026#34;C\u0026#34;) || ($context.isValid == true \u0026amp;\u0026amp; $item.code == \u0026#34;A\u0026#34;)\npass_step\r#\rThis property on the step defines what must execute if the expression passes. This is an optional property.\nIf the expression passes but no pass_step is defined, the process will stop.\nThe pass_step can either be the name of the next step to execute\n{ ... \u0026#34;next_step\u0026#34;: \u0026#34;do_something\u0026#34; } or, the actual step object.\n{ ... \u0026#34;next_step\u0026#34;: { type: \u0026#34;console\u0026#34;, action: \u0026#34;log\u0026#34;, args: { message: \u0026#34;success!\u0026#34; } } } fail_step\r#\rThis property on the step defines what must execute if the expression fails. This is an optional property. If the expression fails but no fail_step is defined, the process will stop.\nLike the pass_step, the fail_step can either be the name of the next step or a step object.\rexample\r#\r{ type: \u0026#34;condition\u0026#34;, args: { condition: \u0026#34;$context.records.length \u0026gt; 0\u0026#34; }, pass_step: \u0026#34;print_records\u0026#34;, fail_step: { type: \u0026#34;console\u0026#34;, action: \u0026#34;error\u0026#34;, args: { message: \u0026#34;No records to print!\u0026#34; } } } "},{"id":7,"href":"/docs/systems/console/","title":"Console","section":"Docs","content":"\rConsole\r#\rConsole logging is a very useful way to debug processes.\nThe main goal here to provide a debugging tool for schema processes.\nYou should not have console actions as part of deployed code.\nBe it JavaScript or schema.\rSince this is intended for schemas we will not show a JavaScript equivalent.\nAll the actions also have the same parameters.\nproperty description required message single string message to console false messages an array of messages to console false You must have either a message or messages property on args.\nActions\r#\rlog error warn table log\r#\rThis is the equivalent of console.log in JavaScript.\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;console\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;log\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;message\u0026#34;: \u0026#34;Hello World\u0026#34; } } error\r#\rThis is the equivalent of console.error in JavaScript.\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;console\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;error\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;messages\u0026#34;: [\u0026#34;Error 1\u0026#34;, \u0026#34;Error 2\u0026#34;] } } warn\r#\rThis is the equivalent of console.warn in JavaScript.\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;console\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;warn\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;message\u0026#34;: \u0026#34;$context.be_warned\u0026#34; } } table\r#\rThis is the equivalent of console.table in JavaScript.\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;console\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;table\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;message\u0026#34;: \u0026#34;$context.records\u0026#34; } } "},{"id":8,"href":"/docs/systems/css-grid/","title":"Css Grid","section":"Docs","content":"\rCSS Grid\r#\rCSS grids is often used for dynamic layout of UI parts.\nThis feature allows both schema and JavaScript execution of intent, affecting the CSS grid structure of an HTMLElement.\nNot loaded by default\nManaging css grid layout is a specialist job and not something commonly used everywhere.\nBecause of that it is not loaded as part of the default stack.\nIf you want this feature, all you need to do is import the css-grid-actions.js file.\nThis will auto register the intent as crs.intent.cssgrid\rDisplay\nThe element must have a display of \u0026ldquo;grid\u0026rdquo;.\nIf you are creating the element dynamically or just want to ensure it is a css grid, use the init function at the start of your process.\rBefore we continue please note:\nThe element property for these calls can either refer to:\nThe actual HTMLElement from the dom The query string used by document.querySelector to get that element. From the javascript side you could pass on either.\nFrom the schema side it is most likely the query string.\nActions\r#\rinit set_columns set_rows add_columns remove_columns set_column_width add_rows remove_rows set_row_height set_regions clear_region column_count row_count init\r#\rEnsure that the given element has the css display of \u0026ldquo;grid\u0026rdquo;\nproperty description required element target element true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;cssgrid\u0026#34;, \u0026#34;action\u0026#34; : \u0026#34;init\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;element\u0026#34;: \u0026#34;#grid\u0026#34; } } javascript\ncrs.call(\u0026#34;cssgrid\u0026#34;, \u0026#34;init\u0026#34;, { element: this.gridElement }); set_columns\r#\rThis sets the grid-template-columns css property.\nIf you had existing values on that property it will be overwritten.\nproperty description required element target element true columns string value used to set the css columns true columns example \u0026#34;1fr 1fr 3rem\u0026#34;\njson\n\u0026#34;step\u0026#34; : { \u0026#34;type\u0026#34; : \u0026#34;cssgrid\u0026#34;, \u0026#34;action\u0026#34; : \u0026#34;set_columns\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;element\u0026#34; : \u0026#34;#grid\u0026#34; \u0026#34;columns\u0026#34; : \u0026#34;1fr 1fr 1fr\u0026#34; } } javascript\ncrs.call(\u0026#34;cssgrid\u0026#34;, \u0026#34;set_columns\u0026#34;, { element: this.gridElement, columns: \u0026#34;1fr 1fr 1fr\u0026#34; }); set_rows\r#\rThis sets the grid-template-rows css property.\nIf you had existing values on that property it will be overwritten.\nproperty description required element target element true rows string value used to set the css rows true rows example \u0026#34;1fr 1fr 3rem\u0026#34;\njson\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;cssgrid\u0026#34;, \u0026#34;action\u0026#34; : \u0026#34;set_rows\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;element\u0026#34; : \u0026#34;#grid\u0026#34; \u0026#34;rows\u0026#34; : \u0026#34;1fr 1fr 1fr\u0026#34; } } javascript\ncrs.call(\u0026#34;cssgrid\u0026#34;, \u0026#34;set_rows\u0026#34;, { element : this.gridElement, rows : \u0026#34;repeat(4, max-content)\u0026#34; }); add_columns\r#\rThis function adds columns to existing columns.\nproperty description required default value element target element true width single width value or array of values true position \u0026ldquo;front\u0026rdquo; or \u0026ldquo;end\u0026rdquo; or index value false \u0026ldquo;end\u0026rdquo; If width is an array, a column will be added for each width in the array.\nThe width values must be css width values.\njson\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;cssgrid\u0026#34;, \u0026#34;action\u0026#34; : \u0026#34;add_columns\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;element\u0026#34; : \u0026#34;#grid\u0026#34; \u0026#34;width\u0026#34; : \u0026#34;20px\u0026#34;, \u0026#34;position\u0026#34; : \u0026#34;front\u0026#34; } } Other width examples\n\u0026#34;width\u0026#34;: [\u0026#34;20px\u0026#34;, \u0026#34;5rem\u0026#34;, \u0026#34;3%\u0026#34;, \u0026#34;1fr\u0026#34;] javascript\ncrs.call(\u0026#34;cssgrid\u0026#34;, \u0026#34;add_columns\u0026#34;, { element : this.gridElement, width : \u0026#34;2rem\u0026#34;, position : 2 }); crs.call(\u0026#34;cssgrid\u0026#34;, \u0026#34;add_columns\u0026#34;, { element : this.gridElement, width : [\u0026#34;10px\u0026#34;, \u0026#34;11px\u0026#34;, \u0026#34;12px\u0026#34;], position : \u0026#39;end\u0026#39; }); remove_columns\r#\rRemove a number of columns based on the position defined and the number of columns to remove.\nproperty description required default value element target element true position \u0026ldquo;front\u0026rdquo; or \u0026ldquo;end\u0026rdquo; or index value false \u0026ldquo;end\u0026rdquo; count the number of columns to remove false 1 json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;cssgrid\u0026#34;, \u0026#34;action\u0026#34; : \u0026#34;remove_columns\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;element\u0026#34; : \u0026#34;#grid\u0026#34; \u0026#34;position\u0026#34; : \u0026#34;end\u0026#34;, \u0026#34;count\u0026#34; : 2 } } javascript\ncrs.call(\u0026#34;cssgrid\u0026#34;, \u0026#34;remove_columns\u0026#34;, { element : this.gridElement, position : 2, count : 2 }); set_column_width\r#\rSet a column\u0026rsquo;s width.\nFor this feature you need to provide the index of the column to resizes.\nproperty description required element target element true position index value true width the width to set the column too true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;cssgrid\u0026#34;, \u0026#34;action\u0026#34; : \u0026#34;set_column_width\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;element\u0026#34; : \u0026#34;#grid\u0026#34; \u0026#34;width\u0026#34; : \u0026#34;2rem\u0026#34;, \u0026#34;position\u0026#34; : 2 } } javascript\ncrs.call(\u0026#34;cssgrid\u0026#34;, \u0026#34;set_column_width\u0026#34;, { \u0026#34;element\u0026#34; : \u0026#34;#grid\u0026#34; \u0026#34;width\u0026#34; : \u0026#34;2rem\u0026#34;, \u0026#34;position\u0026#34; : 2 }); add_rows\r#\rAdd rows works exactly the same as add_columns.\nThe only difference is that instead of using width you now set the height. The step action to use is \u0026ldquo;add_rows\u0026rdquo;.\nremove_rows\r#\rThis works the same as remove_columns.\nset_row_height\r#\rThis works the same as set_column_width.\nReplace with width property with height\nset_regions\r#\rOn a css grid element set the areas for the grid.\nAreas are marked using the following object structure:\n{ start: {col: 0, row: 0}, end : {col: 1, row: 0}, name : \u0026#34;area_name\u0026#34; } property description required defaults element target element true areas array of area objects true auto_fill create and add divs to each reagion false false tag_name element tag name to use to auto fill with false \u0026ldquo;div\u0026rdquo; json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;cssgrid\u0026#34;, \u0026#34;action\u0026#34; : \u0026#34;set_regions\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;element\u0026#34; : \u0026#34;#grid\u0026#34;, \u0026#34;areas\u0026#34;: [ { start: {col: 0, row: 0}, end: {col: 1, row: 1}, name: \u0026#34;area1\u0026#34; }, { start: {col: 2, row: 0}, end: {col: 2, row: 1}, name: \u0026#34;area2\u0026#34; }, { start: {col: 0, row: 2}, end: {col: 2, row: 2}, name: \u0026#34;area3\u0026#34; } ] } } javascript\nconst count = crs.call(\u0026#34;cssgrid\u0026#34;, \u0026#34;set_regions\u0026#34;, { \u0026#34;element\u0026#34; : \u0026#34;#grid\u0026#34;, \u0026#34;areas\u0026#34;: [ { start: {col: 0, row: 0}, end: {col: 1, row: 1}, name: \u0026#34;area1\u0026#34; }, { start: {col: 2, row: 0}, end: {col: 2, row: 1}, name: \u0026#34;area2\u0026#34; }, { start: {col: 0, row: 2}, end: {col: 2, row: 2}, name: \u0026#34;area3\u0026#34; } ] }); clear_region\r#\rFor a given area remove elements in that region based on the data-area attribute.\nproperty description required element target element true area area name true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;cssgrid\u0026#34;, \u0026#34;action\u0026#34; : \u0026#34;clear_region\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;element\u0026#34; : \u0026#34;#grid\u0026#34;, \u0026#34;area\u0026#34;: \u0026#34;area1\u0026#34; } } javascript\nconst count = crs.call(\u0026#34;cssgrid\u0026#34;, \u0026#34;clear_region\u0026#34;, { \u0026#34;element\u0026#34; : \u0026#34;#grid\u0026#34;, \u0026#34;area1\u0026#34;: \u0026#34;area1\u0026#34; }); column_count\r#\rFor the given element, return how many columns it has.\nproperty description required element target element true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;cssgrid\u0026#34;, \u0026#34;action\u0026#34; : \u0026#34;column_count\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;element\u0026#34; : \u0026#34;#grid\u0026#34; } } javascript\nconst count = crs.call(\u0026#34;cssgrid\u0026#34;, \u0026#34;column_count\u0026#34;, { \u0026#34;element\u0026#34; : \u0026#34;#grid\u0026#34; }); row_count\r#\rFor the given element, return how many rows it has.\nproperty description required element target element true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;cssgrid\u0026#34;, \u0026#34;action\u0026#34; : \u0026#34;row_count\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;element\u0026#34; : \u0026#34;#grid\u0026#34; } } javascript\nconst count = crs.call(\u0026#34;cssgrid\u0026#34;, \u0026#34;row_count\u0026#34;, { \u0026#34;element\u0026#34; : \u0026#34;#grid\u0026#34; }); "},{"id":9,"href":"/docs/systems/data/","title":"Data","section":"Docs","content":"\rData\r#\rThese functions perform data functions helping you build data perspectives.\nNot loaded by default\nThis uses web assembly so it is not loaded by default. If you want this feature, all you need to do is import the data-actions.js file.\nThis will auto register the intent as crs.intent.data\rActions\r#\rfilter_data sort group aggregate aggregate_group in_filter unique_values debug perspective iso8601_to_string iso8601_batch filter_data\r#\rFilter data based on filter expressions and return an array of indexes of records that match that filter.\nresult example [1, 3, 5, 20]\nproperty description required source array of records or a json string true filter array of filter objects true filter object example\n{ \u0026#34;field\u0026#34;: \u0026#34;site\u0026#34;, \u0026#34;operator\u0026#34;: \u0026#34;==\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;site 1\u0026#34; } list of supported operator values\noperator description data types \u0026ldquo;\u0026gt;\u0026rdquo;, \u0026ldquo;gt\u0026rdquo; greater than all \u0026ldquo;\u0026gt;=\u0026rdquo;, \u0026ldquo;ge\u0026rdquo; greater or equal too all \u0026ldquo;\u0026lt;\u0026rdquo;, \u0026ldquo;lt\u0026rdquo; less than all \u0026ldquo;\u0026lt;=\u0026rdquo;, \u0026ldquo;le\u0026rdquo; less or equal too all \u0026ldquo;==\u0026rdquo;, \u0026ldquo;=\u0026rdquo;, \u0026ldquo;eq\u0026rdquo; equals all \u0026ldquo;!=\u0026rdquo;, \u0026ldquo;\u0026lt;\u0026gt;\u0026rdquo;, \u0026ldquo;ne\u0026rdquo; not equal too all \u0026ldquo;is_null\u0026rdquo; is null all \u0026ldquo;not_null\u0026rdquo; not null all \u0026ldquo;like\u0026rdquo; like string \u0026ldquo;not_like\u0026rdquo; not like string \u0026ldquo;in\u0026rdquo; one of / in collection array of values \u0026ldquo;between\u0026rdquo; greater than value 1 and less than value 2 all \u0026ldquo;startswidth\u0026rdquo; string starts with substring string \u0026ldquo;endswidth\u0026rdquo; string ends with substring string Filter expressions also support \u0026ldquo;or\u0026rdquo;, \u0026ldquo;and\u0026rdquo; and \u0026ldquo;not\u0026rdquo;.\n\u0026ldquo;and\u0026rdquo; is the default so if you don\u0026rsquo;t define it, the expressions are chained by default using \u0026ldquo;and\u0026rdquo;.\nThat means that each expression must pass to return a \u0026ldquo;true\u0026rdquo; result.\noperator description \u0026ldquo;and\u0026rdquo;, \u0026ldquo;\u0026amp;\u0026amp;\u0026rdquo; and \u0026ldquo;or\u0026rdquo;, \u0026ldquo;||\u0026rdquo; or \u0026ldquo;not\u0026rdquo;, \u0026ldquo;!\u0026rdquo; invert of expression simple_filter_example\r#\rThis example is true for one to N filter expressions using the \u0026ldquo;and\u0026rdquo; operator.\nfilter: [ { \u0026#34;field\u0026#34;: \u0026#34;site\u0026#34;, \u0026#34;operator\u0026#34;: \u0026#34;==\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;site 1\u0026#34; }, { \u0026#34;field\u0026#34;: \u0026#34;value\u0026#34;, \u0026#34;operator\u0026#34;: \u0026#34;gt\u0026#34;, \u0026#34;value\u0026#34;: 10} ] not_expression\r#\rfilter: { \u0026#34;operator\u0026#34;: \u0026#34;not\u0026#34;, \u0026#34;expressions\u0026#34;: [ { \u0026#34;field\u0026#34;: \u0026#34;site\u0026#34;, \u0026#34;operator\u0026#34;: \u0026#34;==\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;site 1\u0026#34; }, { \u0026#34;field\u0026#34;: \u0026#34;value\u0026#34;, \u0026#34;operator\u0026#34;: \u0026#34;gt\u0026#34;, \u0026#34;value\u0026#34;: 10} ] } \u0026ldquo;and\u0026rdquo; the two expressions and return the inverse of that.\nor_expression\r#\rfilter: { \u0026#34;operator\u0026#34;: \u0026#34;or\u0026#34;, \u0026#34;expressions\u0026#34;: [ { \u0026#34;field\u0026#34;: \u0026#34;site\u0026#34;, \u0026#34;operator\u0026#34;: \u0026#34;==\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;site 1\u0026#34; }, { \u0026#34;field\u0026#34;: \u0026#34;value\u0026#34;, \u0026#34;operator\u0026#34;: \u0026#34;gt\u0026#34;, \u0026#34;value\u0026#34;: 10} ] } Either one of the two expressions must be true for the expression to pass.\ncomplex_nexted_statement\r#\rfilter: { \u0026#34;operator\u0026#34;: \u0026#34;not\u0026#34;, \u0026#34;expressions\u0026#34;: [ { \u0026#34;operator\u0026#34;: \u0026#34;and\u0026#34;, \u0026#34;expressions\u0026#34;: [ { \u0026#34;operator\u0026#34;: \u0026#34;or\u0026#34;, \u0026#34;expressions\u0026#34;: [ {\u0026#34;value\u0026#34;, \u0026#34;eq\u0026#34;, 1}, {\u0026#34;value\u0026#34;, \u0026#34;eq\u0026#34;, 2}, ] }, {\u0026#34;value2\u0026#34;, \u0026#34;eq\u0026#34;, 3}, ] } ] } property description required default value source the array of data to filter true filter filter expressions as seen above true case_sensitive the array of data to filter false true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;data\u0026#34;, \u0026#34;action\u0026#34; : \u0026#34;filter\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;source\u0026#34;: \u0026#34;$context.data\u0026#34;, \u0026#34;filter\u0026#34;: [{ \u0026#34;field\u0026#34;: \u0026#34;site\u0026#34;, \u0026#34;operator\u0026#34;: \u0026#34;==\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;site 1\u0026#34; }], \u0026#34;case_sensitive\u0026#34;: false } } javascript\ncrs.call(\u0026#34;data\u0026#34;, \u0026#34;filter\u0026#34;, { \u0026#34;source\u0026#34;: \u0026#34;$context.data\u0026#34;, \u0026#34;filter\u0026#34;: [{ \u0026#34;field\u0026#34;: \u0026#34;site\u0026#34;, \u0026#34;operator\u0026#34;: \u0026#34;==\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;site 1\u0026#34; }], \u0026#34;case_sensitive\u0026#34;: false }); sort\r#\rSort the data according to sort definition.\nThe result, same as the filter is an array of indexes.\nproperty description required default value source the array of data to sort true sort array of sort definition (see examples below) true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;data\u0026#34;, \u0026#34;action\u0026#34; : \u0026#34;sort\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;source\u0026#34;: \u0026#34;$context.data\u0026#34;, \u0026#34;sort\u0026#34; : [ { \u0026#34;name\u0026#34;: \u0026#34;site\u0026#34;, \u0026#34;direction\u0026#34;: \u0026#34;dec\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;value\u0026#34;, \u0026#34;direction\u0026#34;: \u0026#34;asc\u0026#34; }, ] } } javascript\ncrs.call(\u0026#34;data\u0026#34;, \u0026#34;sort\u0026#34;, { \u0026#34;source\u0026#34;: \u0026#34;$context.data\u0026#34;, \u0026#34;sort\u0026#34; : [ { \u0026#34;name\u0026#34;: \u0026#34;site\u0026#34;, \u0026#34;direction\u0026#34;: \u0026#34;dec\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;value\u0026#34;, \u0026#34;direction\u0026#34;: \u0026#34;asc\u0026#34; }, ] }); group\r#\rCreate a group object that defines how data is grouped based on group definition.\nproperty description required default value source the array of data to group true fields array of field names that define the grouping true Group by first field, then the next field, and so on\u0026hellip;\nresult structure\n{ \u0026#34;root\u0026#34;: { \u0026#34;child_count\u0026#34;: 3, \u0026#34;children\u0026#34;: { \u0026#34;Site 1\u0026#34;: { \u0026#34;child_count\u0026#34;: 1, \u0026#34;field\u0026#34;: \u0026#34;value\u0026#34;, \u0026#34;row_count\u0026#34;: 1, \u0026#34;rows\u0026#34;: [1] }, ... }, \u0026#34;row_count\u0026#34;: 3 } } A couple of notes:\nThere will always be a root object. Each grouping has a children property. The root level item has a rows property, an array of indexes to the rows in the data. The child count indicates the number of children on the next level. The row count indicates how many records are represented on this branch. json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;data\u0026#34;, \u0026#34;action\u0026#34; : \u0026#34;group\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;source\u0026#34;: \u0026#34;$context.data\u0026#34;, \u0026#34;fields\u0026#34; : [\u0026#34;site\u0026#34;, \u0026#34;value\u0026#34;] } } javascript\ncrs.call(\u0026#34;data\u0026#34;, \u0026#34;group\u0026#34;, { \u0026#34;source\u0026#34;: \u0026#34;$context.data\u0026#34;, \u0026#34;fields\u0026#34; : [\u0026#34;site\u0026#34;, \u0026#34;value\u0026#34;] }); aggregate\r#\rCalculate aggregate values from the data source.\nproperty description required default value source the array of data to sort true aggregate object defining key value pairs for grouping true The key in the aggregate definition is the aggregate function to use.\nThe value is the field name of the value to use in the calculation.\nSupported aggregate functions are:\nmin max ave sum count You can aggregate using different fields in the same call.\nThe example below aggregates three different fields, \u0026ldquo;value\u0026rdquo;, \u0026ldquo;value2\u0026rdquo; and \u0026ldquo;value3\u0026rdquo; using different aggregate functions.\njson\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;data\u0026#34;, \u0026#34;action\u0026#34; : \u0026#34;aggregate\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;source\u0026#34; : \u0026#34;$context.data\u0026#34;, \u0026#34;aggregate\u0026#34; : { \u0026#34;min\u0026#34;: \u0026#34;value\u0026#34;, \u0026#34;ave\u0026#34;: \u0026#34;value\u0026#34;, \u0026#34;ave\u0026#34;: \u0026#34;value2\u0026#34;, \u0026#34;ave\u0026#34;: \u0026#34;value3\u0026#34; } } } javascript\ncrs.call(\u0026#34;data\u0026#34;, \u0026#34;aggregate\u0026#34;, { \u0026#34;source\u0026#34;: \u0026#34;$context.data\u0026#34;, \u0026#34;aggregate\u0026#34; : { \u0026#34;min\u0026#34;: \u0026#34;value\u0026#34;, \u0026#34;ave\u0026#34;: \u0026#34;value\u0026#34;, \u0026#34;ave\u0026#34;: \u0026#34;value2\u0026#34;, \u0026#34;ave\u0026#34;: \u0026#34;value3\u0026#34; } }); aggregate_group\r#\rIf you have a grouping result object, you may want to calculate aggregates for records for a given group of sub-group. The call looks exactly like the above (aggregate rows)(#aggregate_rows) with two differences.\nthe action to call is \u0026ldquo;aggregate_group\u0026rdquo;. in the args you need to pass on the group object you want to aggregate. So when we say, pass on the group, what are we talking about?\nConsider the group result example above, you can get the group as:\nconst group = mygroup[\u0026#34;root\u0026#34;].children[\u0026#34;Site 1\u0026#34;]; in_filter\r#\rThis function checks if a defined source object fits in a filter expression.\nThis is often used when you have an existing filter but have incoming data.\nDo you render the new record or leave it out?\nThis function helps you decide if the object is visible based on the filter definition.\nproperty description required default value source object to check true filter filter definition, same as used in filter action true case_sensitive is the filter case sensitive or not false true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;data\u0026#34;, \u0026#34;action\u0026#34; : \u0026#34;in_filter\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;source\u0026#34; : \u0026#34;$context.record\u0026#34;, \u0026#34;filter\u0026#34;: [ { \u0026#34;field\u0026#34;: \u0026#34;site\u0026#34;, \u0026#34;operator\u0026#34;: \u0026#34;==\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;site 1\u0026#34; }, { \u0026#34;field\u0026#34;: \u0026#34;value\u0026#34;, \u0026#34;operator\u0026#34;: \u0026#34;gt\u0026#34;, \u0026#34;value\u0026#34;: 10} ] } } javascript\ncrs.call(\u0026#34;data\u0026#34;, \u0026#34;in_filter\u0026#34;, { \u0026#34;source\u0026#34; : \u0026#34;$context.record\u0026#34;, \u0026#34;filter\u0026#34; : [ { \u0026#34;field\u0026#34;: \u0026#34;site\u0026#34;, \u0026#34;operator\u0026#34;: \u0026#34;==\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;site 1\u0026#34; }, { \u0026#34;field\u0026#34;: \u0026#34;value\u0026#34;, \u0026#34;operator\u0026#34;: \u0026#34;gt\u0026#34;, \u0026#34;value\u0026#34;: 10} ] }); unique_values\r#\rFor a given array of objects, get the unique values and count for given fields.\nThere are a number of use cases for this.\nOne would be to get an understanding of how the records are distributed between values.\nIt is also used as part of filters visualizations.\nproperty description required source array of objects to use true fields field definition object true The field definition object exists out of two properties.\nname type Supported types are:\nstring duration long number boolean If none is defined it will default to string.\njson\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;data\u0026#34;, \u0026#34;action\u0026#34; : \u0026#34;unique_values\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;source\u0026#34; : \u0026#34;$context.record\u0026#34;, \u0026#34;fields\u0026#34; : [ {\u0026#34;name\u0026#34;: \u0026#34;isActive\u0026#34;, type: \u0026#34;boolean\u0026#34;}, {\u0026#34;name\u0026#34;: \u0026#34;external_code\u0026#34;} ] } } javascript\ncrs.call(\u0026#34;data\u0026#34;, \u0026#34;unique_values\u0026#34;, { \u0026#34;source\u0026#34; : \u0026#34;$context.record\u0026#34;, \u0026#34;fields\u0026#34; : [ {\u0026#34;name\u0026#34;: \u0026#34;isActive\u0026#34;, type: \u0026#34;boolean\u0026#34;}, {\u0026#34;name\u0026#34;: \u0026#34;external_code\u0026#34;} ] }); debug\r#\rThis is used for debugging.\nIf something goes wrong with your web assembly call and, you want to get debug information back, use this function before making your problematic call. The error will now contain stack data.\njson\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;data\u0026#34;, \u0026#34;action\u0026#34; : \u0026#34;debug\u0026#34; } javascript\ncrs.call(\u0026#34;data\u0026#34;, \u0026#34;debug\u0026#34;}); perspective\r#\rThis function is a single call to build a perspective.\nThe result will change based on the parts of the perspective.\nIf you have aggregates defined, you will get an aggregate result.\nIf you define grouping, you will get a grouping result.\nIf you only define filter and or sort, you will get an array of index back.\nThe properties of the perspective object will define what this will do.\nIf you add a filter property, a filter will ba applied, add a sort property to perform a sort and so forth. The example will show all of them, but know that you can have any subset.\nperspective example\n{ \u0026#34;filter\u0026#34; : [{ \u0026#34;field\u0026#34;: \u0026#34;site\u0026#34;, \u0026#34;operator\u0026#34;: \u0026#34;==\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;site 1\u0026#34; }], \u0026#34;sort\u0026#34; : [\u0026#34;field1\u0026#34;, \u0026#34;field2\u0026#34;], \u0026#34;group\u0026#34; : [\u0026#34;field1\u0026#34;, \u0026#34;field2\u0026#34;], \u0026#34;aggregates\u0026#34; : {\u0026#34;min\u0026#34;: \u0026#34;value\u0026#34;, \u0026#34;max\u0026#34;: \u0026#34;value\u0026#34;} } property description required source array of objects to use true perspective perspective object as shown above true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;data\u0026#34;, \u0026#34;action\u0026#34; : \u0026#34;perspective\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;source\u0026#34; : \u0026#34;$context.record\u0026#34;, \u0026#34;perspective\u0026#34; : { ... } } } javascript\ncrs.call(\u0026#34;data\u0026#34;, \u0026#34;perspective\u0026#34;, { \u0026#34;source\u0026#34; : \u0026#34;$context.record\u0026#34;, \u0026#34;perspective\u0026#34; : { ... } }); "},{"id":10,"href":"/docs/systems/database/","title":"Database","section":"Docs","content":"\rDatabase\r#\rWorking with IndexDB. There are a number of components that render themselves from data. This data can be in memory, or it can be in indexDB. There is a particular way how the IndexDB works, and you should take note of it.\nThe store has key and value fields. The key field is also the index of the row in the table. Most all render from store is done using the indexes, that is why the key is the record index.\nWhen you open a database, the db instance passed to you has operational functions you can use for crud operations. The process api calls are mostly there for when you call the indexdb functions in a json process.\nYou can evaluate the instance for its details.\nFor best practice I would recommend just using the process api system to keep things consistent.\nActions\r#\radd delete delete_old close dump get_from_index get_all clear delete_record update_record add_record get_batch get_values calculate_paging get_page get_range open\r#\rCreate a database object.\nIn this process the database and tables are created.\nproperties\nproperty description required default name database name true version version of database false 1 tables what tables to create true add_timestamp should the time stamp be used in the name false false target where to copy the database class instance false The \u0026ldquo;tables\u0026rdquo; property is an object where the property name is the table name and the body is the properties.\njson\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;db\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;open\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;data\u0026#34;, \u0026#34;version\u0026#34;: 1, \u0026#34;tables\u0026#34;: { \u0026#34;data\u0026#34;: { \u0026#34;indexes\u0026#34;: { \u0026#34;id\u0026#34;: { unique: true } } } }, \u0026#34;add_timestamp\u0026#34;: true \u0026#34;target\u0026#34;: \u0026#34;$context.db\u0026#34; } } javascript\n... tablesDef[\u0026#34;data\u0026#34;] = { indexes: { id: { unique: true } } }; const db = await crs.call(\u0026#34;db\u0026#34;, \u0026#34;open\u0026#34;, { name: dbName, version: 1, tables: tablesDef, add_timestamp: true }) delete\r#\rDelete a IndexDB database\nproperty description required name database name true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;db\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;delete\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;data\u0026#34;, } } javascript\nconst db = await crs.call(\u0026#34;db\u0026#34;, \u0026#34;delete\u0026#34;, { name: \u0026#34;data\u0026#34; }) delete_old\r#\rDelete all databases older than the defined days.\nUse fractions for hours or minutes.\nproperty description required days number of days before deleting the database true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;db\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;delete_old\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;days\u0026#34;: 1, } } javascript crs.call(\u0026#34;db\u0026#34;, \u0026#34;delete_old\u0026#34;, {days: 1})\nclose\r#\rClose the database connection to the indexdb database instance.\nFor this you will need to pass in the db object created during the open operation.\nYou could also just call the close action directly on the instance but if you are doing this as part of a process, this makes it a bit easier.\nproperty description required db index db instance true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;db\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;close\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;db\u0026#34;: \u0026#34;$context.db\u0026#34;, } } javascript crs.call(\u0026#34;db\u0026#34;, \u0026#34;close\u0026#34;, {db: instance})\ndump\r#\rThis function does a data dump of records to a data store for a given record set. The db passed in is an open database, so you should use open before calling this.\nproperty description required db index db instance true store table name to add the records too true records array of objects to add to the store true During this process each record is added an \u0026ldquo;__ind\u0026rdquo; is added to the record indicating what index in the db it is on. This speeds things up from a development perspective to say get me the next batch from this record forward.\njson\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;db\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;dump\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;db\u0026#34;: \u0026#34;$context.db\u0026#34;, \u0026#34;store\u0026#34;: \u0026#34;data\u0026#34;, \u0026#34;records\u0026#34;: \u0026#34;$context.records\u0026#34; } } javascript\ncrs.call(\u0026#34;db\u0026#34;, \u0026#34;close\u0026#34;, { db: instance, store: \u0026#34;db\u0026#34;, records: [...] }) get_from_index\r#\rThis function will get you a set of records based on a number array of key values.\nSince the key is the index of the record, this means you will send an array of indexes to fetch a batch of records.\nThe values do not have to be in sequence, rather the items you want in the order that you want them.\nThis will return an array of records for the items found in the database.\nproperty description required db index db instance true store table name to add the records too true keys array indexes to get true target where do you want the result to be copied too false json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;db\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;get_from_index, \u0026#34;args\u0026#34;: { \u0026#34;db\u0026#34;: \u0026#34;$context.db\u0026#34;, \u0026#34;store\u0026#34;: \u0026#34;data\u0026#34;, \u0026#34;keys\u0026#34;: [0, 1, 2, 3, 10] } } javascript\nconst result = crs.call(\u0026#34;db\u0026#34;, \u0026#34;get_from_index\u0026#34;, { db: instance, store: \u0026#34;db\u0026#34;, keys: [...] }); get_all\r#\rThis function gets all the records in the table and returns it to you.\nproperty description required db index db instance true store table name to add the records too true target where do you want the result to be copied too false json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;db\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;get_all, \u0026#34;args\u0026#34;: { \u0026#34;db\u0026#34;: \u0026#34;$context.db\u0026#34;, \u0026#34;store\u0026#34;: \u0026#34;data\u0026#34; } } javascript\nconst result = crs.call(\u0026#34;db\u0026#34;, \u0026#34;get_all\u0026#34;, {db: instance, store: \u0026#34;db\u0026#34;}); clear\r#\rClear a given store on an already open indexdb instance, removing all records from that store. You can also call the clear function directly on the db instance.\nproperty description required db index db instance true store table name to add the records too true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;db\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;clear, \u0026#34;args\u0026#34;: { \u0026#34;db\u0026#34;: \u0026#34;$context.db\u0026#34;, \u0026#34;store\u0026#34;: \u0026#34;data\u0026#34; } } javascript\ncrs.call(\u0026#34;db\u0026#34;, \u0026#34;clear\u0026#34;, {db: instance, store: \u0026#34;db\u0026#34;}); delete_record\r#\rFor a given set of key, remove the records from the store.\nproperty description required db index db instance true store table name to add the records too true key key value of the record you want to delete true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;db\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;delete_record, \u0026#34;args\u0026#34;: { \u0026#34;db\u0026#34;: \u0026#34;$context.db\u0026#34;, \u0026#34;store\u0026#34;: \u0026#34;data\u0026#34;, \u0026#34;key\u0026#34;: 0 } } javascript\ncrs.call(\u0026#34;db\u0026#34;, \u0026#34;delete_record\u0026#34;, {db: instance, store: \u0026#34;db\u0026#34;, key: 0}); update_record\r#\rFor a given key, replace the row object.\nproperty description required db index db instance true store table name to add the records too true key key value of the record you want to delete true model new row object true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;db\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;update_record, \u0026#34;args\u0026#34;: { \u0026#34;db\u0026#34;: \u0026#34;$context.db\u0026#34;, \u0026#34;store\u0026#34;: \u0026#34;data\u0026#34;, \u0026#34;key\u0026#34;: 0, \u0026#34;model\u0026#34;: \u0026#34;$context.newModel\u0026#34; } } javascript\ncrs.call(\u0026#34;db\u0026#34;, \u0026#34;update_record\u0026#34;, { db: instance, store: \u0026#34;db\u0026#34;, key: 0, model: {...} }); add_record\r#\rAdd a new record object to the defined indexdb store\nproperty description required db index db instance true store table name to add the records too true model new row object true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;db\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;add_record, \u0026#34;args\u0026#34;: { \u0026#34;db\u0026#34;: \u0026#34;$context.db\u0026#34;, \u0026#34;store\u0026#34;: \u0026#34;data\u0026#34;, \u0026#34;model\u0026#34;: \u0026#34;$context.newModel\u0026#34; } } javascript\ncrs.call(\u0026#34;db\u0026#34;, \u0026#34;add_record\u0026#34;, { db: instance, store: \u0026#34;db\u0026#34;, model: {...} }); get_batch\r#\rThis function gets a batch of records starting at the start index to the end index and everything between.\nproperty description required db index db instance true store table name to add the records too true start start index true end end index true target where to copy the results false json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;db\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;get_batch, \u0026#34;args\u0026#34;: { \u0026#34;db\u0026#34;: \u0026#34;$context.db\u0026#34;, \u0026#34;store\u0026#34;: \u0026#34;data\u0026#34;, \u0026#34;start\u0026#34;: 0, \u0026#34;end\u0026#34;: 10, \u0026#34;target\u0026#34;: \u0026#34;$context.records\u0026#34; } } javascript\nconst results = crs.call(\u0026#34;db\u0026#34;, \u0026#34;get_batch\u0026#34;, { db: instance, store: \u0026#34;db\u0026#34;, start: 0, end: 10 }); get_values\r#\rFor a given set of keys, I want to fetch a custom object structure that only contains the properties I have defined. This allows you to fetch a subset of what is stored and limit the amount of memory you use.\nproperty description required db index db instance true store table name to add the records too true keys array of key values true fields array of strings defining the fields true target where to copy the results false json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;db\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;get_values, \u0026#34;args\u0026#34;: { \u0026#34;db\u0026#34;: \u0026#34;$context.db\u0026#34;, \u0026#34;store\u0026#34;: \u0026#34;data\u0026#34;, \u0026#34;keys\u0026#34;: [0, 1, 2, 3], \u0026#34;fields\u0026#34;: [\u0026#34;id\u0026#34;, \u0026#34;code\u0026#34;, \u0026#34;description\u0026#34;], \u0026#34;target\u0026#34;: \u0026#34;$context.records\u0026#34; } } javascript\nconst results = crs.call(\u0026#34;db\u0026#34;, \u0026#34;get_values\u0026#34;, { db: instance, store: \u0026#34;db\u0026#34;, keys: [0, 1, 2, 3], fields: [\u0026#34;id\u0026#34;, \u0026#34;code\u0026#34;, \u0026#34;description\u0026#34;] }); calculate_paging\r#\rThis function looks at a defined store and lets you know how many pages it contains based on the page size defined. It returns a object literal that contains two properties.\nrecord_count page_count property description required db index db instance true store table name to add the records too true page_size how big is a page true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;db\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;get_values, \u0026#34;args\u0026#34;: { \u0026#34;db\u0026#34;: \u0026#34;$context.db\u0026#34;, \u0026#34;store\u0026#34;: \u0026#34;data\u0026#34;, \u0026#34;page_size\u0026#34;: 10 } } javascript\nconst results = crs.call(\u0026#34;db\u0026#34;, \u0026#34;get_values\u0026#34;, { db: instance, store: \u0026#34;db\u0026#34;, page_size: 10 }); get_page\r#\rBased on the page number and page size, get me the records for that page.\nUse \u0026ldquo;calculate_paging\u0026rdquo; to determine the number of pages so you don\u0026rsquo;t go over. You can also define what fields to return but if you leave that out, the entire record will be returned.\nproperty description required db index db instance true store table name to add the records too true page_size how big is a page true page_number what is the page number to fetch true fields what field\u0026rsquo;s values must be returned false target where to copy the result false json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;db\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;get_page, \u0026#34;args\u0026#34;: { \u0026#34;db\u0026#34;: \u0026#34;$context.db\u0026#34;, \u0026#34;store\u0026#34;: \u0026#34;data\u0026#34;, \u0026#34;page_size\u0026#34;: 10 \u0026#34;page_size\u0026#34;: 3, \u0026#34;fields\u0026#34;: [\u0026#34;id\u0026#34;, \u0026#34;code\u0026#34;, \u0026#34;description], \u0026#34;target\u0026#34;: \u0026#34;$context.results\u0026#34; } } javascript\nconst results = crs.call(\u0026#34;db\u0026#34;, \u0026#34;get_page\u0026#34;, { db: instance, store: \u0026#34;db\u0026#34;, page_size: 10, page_number: 3 }); get_range\r#\rFor a given store and field, get me the range values of that field. This will give you back a object containing the following fields.\nmin max This is used to calculate the range of that field for display purposes.\nproperty description required db index db instance true store table name to add the records too true field field name to calculate the range on true target where to copy the result false json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;db\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;get_range, \u0026#34;args\u0026#34;: { \u0026#34;db\u0026#34;: \u0026#34;$context.db\u0026#34;, \u0026#34;store\u0026#34;: \u0026#34;data\u0026#34;, \u0026#34;field\u0026#34;: \u0026#34;number\u0026#34; \u0026#34;target\u0026#34;: \u0026#34;$context.range\u0026#34; } } javascript\nconst results = crs.call(\u0026#34;db\u0026#34;, \u0026#34;get_page\u0026#34;, { db: instance, store: \u0026#34;db\u0026#34;, field: \u0026#34;number\u0026#34; }); "},{"id":11,"href":"/docs/systems/dom/","title":"Dom","section":"Docs","content":"\rDom\r#\rThe dom feature allows common dom manipulation features.\nThis can be called from both the schema and javascript.\nActions\r#\rcall_on_element get_property set_properties set_attribute get_attribute add_class remove_class set_style set_styles get_style set_text get_text create_element remove_element clear_element show_widget_dialog show_form_dialog set_widget clear_widget move_element move_element_down move_element_up filter_children open_tab clone_for_movement elements_from_template create_inflation_template get_element get_animation_layer clear_animation_layer remove_animation_layer highlight call_on_element\r#\rCall a function on an element.\nThis is often used when you want to call a function on a custom component.\nproperty description required element element or query selector true action the function to call true parameters array of values to pass in as parameters to the function false target where the result is copied too false json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;call_on_element\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;element\u0026#34; : \u0026#34;#element\u0026#34;, \u0026#34;action\u0026#34; : \u0026#34;doSomething\u0026#34;, \u0026#34;parameters\u0026#34; : [\u0026#34;hello world\u0026#34;] } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;call_on_element\u0026#34;, { \u0026#34;element\u0026#34; : \u0026#34;#element\u0026#34; \u0026#34;action\u0026#34; : \u0026#34;doSomething\u0026#34;, \u0026#34;parameters\u0026#34; : [\u0026#34;hello world\u0026#34;] }); get_property\r#\rGet a property value for a given element.\nproperty description required element element or query selector true property property name to get the value from true target where the result is copied too false json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;get_property\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;element\u0026#34; : \u0026#34;#element\u0026#34;, \u0026#34;property\u0026#34; : \u0026#34;value\u0026#34; } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;get_property\u0026#34;, { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, \u0026#34;value\u0026#34; : \u0026#34;value\u0026#34; }); set_properties\r#\rSet one or more properties on a given element.\nproperty description required element element or query selector true properties object that defines property value pairs true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;set_properties\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;property1\u0026#34;: \u0026#34;value1\u0026#34;, \u0026#34;property2\u0026#34;: \u0026#34;value2\u0026#34; } } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;set_properties\u0026#34;, { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;property1\u0026#34;: \u0026#34;value1\u0026#34;, \u0026#34;property2\u0026#34;: \u0026#34;value2\u0026#34; } }); set_attribute\r#\rSet a attribute value on a given element.\nproperty description required element element or query selector true attr the attribute name true value value to set true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;set_attribute\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;element\u0026#34; : \u0026#34;#element\u0026#34;, \u0026#34;attr\u0026#34; : \u0026#34;aria-role\u0026#34;, \u0026#34;value\u0026#34; : \u0026#34;menu\u0026#34; } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;set_attribute\u0026#34;, { \u0026#34;element\u0026#34; : \u0026#34;#element\u0026#34;, \u0026#34;attr\u0026#34; : \u0026#34;aria-role\u0026#34;, \u0026#34;value\u0026#34; : \u0026#34;menu\u0026#34; }); get_attribute\r#\rGet a attribute value from a given element.\nproperty description required element element or query selector true attr the attribute name true target where the result is copied too false json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;get_attribute\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;element\u0026#34; : \u0026#34;#element\u0026#34;, \u0026#34;attr\u0026#34; : \u0026#34;aria-role\u0026#34;, } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;get_attribute\u0026#34;, { \u0026#34;element\u0026#34; : \u0026#34;#element\u0026#34;, \u0026#34;attr\u0026#34; : \u0026#34;aria-role\u0026#34;, }); add_class\r#\rAdd a css class to a given element.\nproperty description required element element or query selector true value array of class names or a single class name (string) true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34; : \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;add_class\u0026#34;, \u0026#34;args\u0026#34; : { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, \u0026#34;value\u0026#34; : \u0026#34;class1\u0026#34; } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;add_class\u0026#34;, { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, \u0026#34;value\u0026#34; : [\u0026#34;class1\u0026#34;, \u0026#34;class2\u0026#34;] }); remove_class\r#\rRemove a css class from a given element.\nproperty description required element element or query selector true value array of class names or a single class name (string) true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;remove_class\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, \u0026#34;value\u0026#34; : \u0026#34;class1\u0026#34; } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;remove_class\u0026#34;, { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, \u0026#34;value\u0026#34; : [\u0026#34;class1\u0026#34;, \u0026#34;class2\u0026#34;] }); set_style\r#\rSet a style value on a given element.\nproperty description required element element or query selector true style js style name on styles object true value value to set on style true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;set_style\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, \u0026#34;style\u0026#34; : \u0026#34;background\u0026#34;, \u0026#34;value\u0026#34; : \u0026#34;#ff0090\u0026#34; } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;set_style\u0026#34;, { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, \u0026#34;style\u0026#34; : \u0026#34;background\u0026#34;, \u0026#34;value\u0026#34; : \u0026#34;#ff0090\u0026#34; }); set_styles\r#\rSet a number of style values on a given element.\nproperty description required element element or query selector true styles object with key value pairs of styles to set true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;set_styles\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, \u0026#34;styles\u0026#34; : { \u0026#34;background\u0026#34;: \u0026#34;#ff0090\u0026#34;, \u0026#34;color\u0026#34;: \u0026#34;white\u0026#34; } } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;set_styles\u0026#34;, { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34; \u0026#34;styles\u0026#34; : { \u0026#34;background\u0026#34;: \u0026#34;#ff0090\u0026#34;, \u0026#34;color\u0026#34;: \u0026#34;white\u0026#34; } }); get_style\r#\rGet a value from a style on a element.\nproperty description required element element or query selector true style style property name go get value of true target where the result is copied too false json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;get_style\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, \u0026#34;style\u0026#34; : \u0026#34;background\u0026#34; } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;get_style\u0026#34;, { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, \u0026#34;style\u0026#34; : \u0026#34;background\u0026#34; }); set_text\r#\rSet the textContent value of a given element.\nproperty description required element element or query selector true value the text to set as the content true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;set_text\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, \u0026#34;value\u0026#34; : \u0026#34;Hello World\u0026#34; } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;set_text\u0026#34;, { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, \u0026#34;value\u0026#34; : \u0026#34;Hello World\u0026#34; }); get_text\r#\rGet a textContent value for a given element.\nproperty description required element element or query selector true target where the result is copied too false json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;get_text\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;get_text\u0026#34;, { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34; }); create_element\r#\rCreate an element for a given tag and set other values on the element such as:\nattributes styles classes dataset attributes text content id children property description required parent element or query selector of where to add the element true tag_name tag name of element to create true target where the result is copied too false id id of the new element false attributes attributes key value pairs false styles styles key value pairs false classes array of class names false dataset data-attributes key value pairs false text_content value to set on element\u0026rsquo;s textContent property false children array of objects that will also use create_element so shares these properties false json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;create_element\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;parent\u0026#34; : \u0026#34;#parent\u0026#34;, \u0026#34;tag_name\u0026#34; : \u0026#34;my-component\u0026#34;, \u0026#34;id\u0026#34; : \u0026#34;component1\u0026#34;, \u0026#34;attributes\u0026#34;: { for=\u0026#34;#that\u0026#34; }, \u0026#34;styles\u0026#34; : { \u0026#34;background\u0026#34;: \u0026#34;silver\u0026#34; }, \u0026#34;classes\u0026#34; : [\u0026#34;class1\u0026#34;], \u0026#34;dataset\u0026#34; : { id: \u0026#34;test-id\u0026#34; }, \u0026#34;text_content\u0026#34;: \u0026#34;Hello World\u0026#34;, \u0026#34;children\u0026#34;: [ { \u0026#34;element\u0026#34;: \u0026#34;div\u0026#34;, \u0026#34;text_content\u0026#34;: \u0026#34;child\u0026#34; } ] } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;create_element\u0026#34;, { \u0026#34;parent\u0026#34; : \u0026#34;#parent\u0026#34;, \u0026#34;tag_name\u0026#34; : \u0026#34;div\u0026#34; }); remove_element\r#\rRemove a element from the dom.\nproperty description required element element or query selector true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;remove_element\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;remove_element\u0026#34;, { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34; }); clear_element\r#\rClear all the children from a given element and release any bindings on it.\nproperty description required element element or query selector true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;clear_element\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;clear_element\u0026#34;, { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34; }); show_widget_dialog\r#\rSet a widget\u0026rsquo;s html and context for binding after adding it to the UI as a dialog.\nproperty description required id id of created element true html template id to use true url where to fetch the HTML data if the template does not exists yet. true The url can be a path or a function.\npath : \u0026ldquo;/templates/dialog.html\u0026rdquo; url : \u0026ldquo;$fn.getTemplate\u0026rdquo; json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;show_widget_dialog\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;id\u0026#34; : \u0026#34;test\u0026#34;, \u0026#34;html\u0026#34; : \u0026#34;$template.process-dialog\u0026#34;, \u0026#34;url\u0026#34; : \u0026#34;$fn.getTemplate\u0026#34; } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;show_widget_dialog\u0026#34;, { \u0026#34;id\u0026#34; : \u0026#34;test\u0026#34;, \u0026#34;html\u0026#34; : \u0026#34;$template.process-dialog\u0026#34;, \u0026#34;url\u0026#34; : \u0026#34;$fn.getTemplate\u0026#34; }); show_form_dialog\r#\rShow a form UI from template as a dialog including an ok and cancel button. Validation is done on the form when pressing OK but will not close until the validation passes.\nproperty description required id id of created element true html template id to use true url where to fetch the HTML data if the template does not exists yet. true error_store the name where errors must be saved on the binding context true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;show_form_dialog\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;id\u0026#34; : \u0026#34;test\u0026#34;, \u0026#34;html\u0026#34; : \u0026#34;$template.process-dialog\u0026#34;, \u0026#34;url\u0026#34; : \u0026#34;$fn.getTemplate\u0026#34; } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;show_form_dialog\u0026#34;, { \u0026#34;id\u0026#34; : \u0026#34;test\u0026#34;, \u0026#34;html\u0026#34; : \u0026#34;$template.process-dialog\u0026#34;, \u0026#34;url\u0026#34; : \u0026#34;$fn.getTemplate\u0026#34; }); set_widget\r#\rSet html and context on an existing widget component.\nproperty description required query element or query selector true context the context object to set on the widget true html template id to use true url where to fetch the HTML data if the template does not exists yet. true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;set_widget\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;query\u0026#34; : \u0026#34;#element\u0026#34;, \u0026#34;context\u0026#34; : \u0026#34;$context.model\u0026#34;, \u0026#34;html\u0026#34; : \u0026#34;$template.process-dialog\u0026#34;, \u0026#34;url\u0026#34; : \u0026#34;$fn.getTemplate\u0026#34; } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;set_widget\u0026#34;, { \u0026#34;query\u0026#34; : \u0026#34;#element\u0026#34;, \u0026#34;context\u0026#34; : \u0026#34;$context.model\u0026#34;, \u0026#34;html\u0026#34; : \u0026#34;$template.process-dialog\u0026#34;, \u0026#34;url\u0026#34; : \u0026#34;$fn.getTemplate\u0026#34; }); clear_widget\r#\rClear a existing widget so that it does not have any content or context.\nproperty description required element element or query selector true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;clear_widget\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;clear_widget\u0026#34;, { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34; }); move_element\r#\rMove an element from one parent to another.\nproperty description required element element or query selector true target element or query selector to where the element will be moved true position where must this be moved false position options\nnull: will append element on parent. \u0026ldquo;before\u0026rdquo;: will add element on target\u0026rsquo;s parent before the target. \u0026ldquo;after\u0026rdquo; : will add element on target\u0026rsquo;s parent after the target. json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;move_element\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, \u0026#34;target\u0026#34; : \u0026#34;#parent\u0026#34; } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;move_element\u0026#34;, { \u0026#34;element\u0026#34; : \u0026#34;#element\u0026#34;, \u0026#34;target\u0026#34; : \u0026#34;#item\u0026#34;, \u0026#34;position\u0026#34; : \u0026#34;before\u0026#34; }); move_element_down\r#\rMove an existing element below its next sibling.\nproperty description required element element or query selector true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;move_element_down\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;move_element_down\u0026#34;, { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34; }); move_element_up\r#\rMove an element above its previous sibling.\nproperty description required element element or query selector true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;move_element_up\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;move_element_up\u0026#34;, { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34; }); filter_children\r#\rPerform a dom filter a a given element\u0026rsquo;s children.\nproperty description required element element or query selector true filter string to filter on true The children must have a data-tags attribute.\nThe data-tags attribute will be used for the text comparison.\nIf the tags are not a match the element will be set as hidden.\nTo clear the filter set the filter string to \u0026ldquo;\u0026rdquo;.\njson\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;filter_children\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;element\u0026#34; : \u0026#34;#element\u0026#34;, \u0026#34;filter\u0026#34; : \u0026#34;$binding.filter\u0026#34; } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;filter_children\u0026#34;, { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, \u0026#34;filter\u0026#34; : \u0026#34;\u0026#34; }); open_tab\r#\rOpen a URL in a new browser tab.\nproperty description required url url to navigate true parameters key value pair of parameters and values to inflate on url false The parameters use the String action\u0026rsquo;s inflate function.\nparameterized url url = \u0026#34;#input/${id}?type=\u0026#39;tasks\u0026#39;\u0026amp;typeId=\u0026#39;${typeId}\u0026#39;\u0026#34; parameters = {id: 1000, typId: \u0026#34;$context.typeId\u0026#34;} json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;open_tab\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;url\u0026#34;: \u0026#34;https://www.google.com\u0026#34; } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;open_tab\u0026#34;, { url: \u0026#34;#input/${id}?type=\u0026#39;tasks\u0026#39;\u0026amp;typeId=\u0026#39;${typeId}\u0026#39;\u0026#34;, parameters: { id: 1000, typeId: \u0026#34;$context.typeId\u0026#34; } }); clone_for_movement\r#\rClone an element and put it on an animation layer for the purpose of moving it on the screen.\nproperty description required default value element element or query selector true parent parent element or query to copy clone too true position object with x and y properties for location false {x: 0, y: 0} attributes attributes to set on clone false styles styles to set on clone false classes classes to add to clone false Position css property is set to \u0026ldquo;absolute\u0026rdquo; by default with a transform property set to \u0026ldquo;translate\u0026rdquo; on x and y.\njson\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;clone_for_movement\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, \u0026#34;parent\u0026#34; : \u0026#34;#parent\u0026#34; } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;clone_for_movement\u0026#34;, { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34; \u0026#34;parent\u0026#34; : \u0026#34;#parent\u0026#34; }); elements_from_template\r#\rGiven an array of objects\nCreate a fragment containing elements based on a template. Add the fragment to a parent element if defined Return fragment to caller property description required default value template_id template id to use from the binding engine\u0026rsquo;s template manager true data array of objects that for whom we need to create elements true template template to use if the required template id does not exists false remove_template remove template when done false false recycle recycle existing children in a element false false row_index what row to start with during recycle false 0 parent parent element that elements will be on schema There are a lot of properties there for specialized usage but the simple use case looks like this.\nawait crs.intent.dom.elements_from_template({ args: { template_id : \u0026#34;tpl_generated\u0026#34;, data : batch, parent : \u0026#34;#inflation-grid\u0026#34; }}, this) json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;elements_from_template\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;elements_from_template\u0026#34;, { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34; }); create_inflation_template\r#\rUse an object literal as the source to generate a template for inflation. For complex templates use the element from template. Function is better for scenarios like cell generation. It automatically registers the template on the inflation engine\nproperty description required default element element or query selector true source object to use for generation true tag_name element tag name to use for each property true ctx the context name to use in the inflation manager false \u0026ldquo;context\u0026rdquo; wrapper wrap these elements in a parent element of this tag type false json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;create_inflation_template\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, \u0026#34;source\u0026#34; : { \u0026#34;property\u0026#34;: \u0026#34;value\u0026#34; }, \u0026#34;tag_name\u0026#34;: \u0026#34;li\u0026#34;, \u0026#34;wrapper\u0026#34; : \u0026#34;ul\u0026#34; } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;create_inflation_template\u0026#34;, { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, \u0026#34;source\u0026#34; : { \u0026#34;property\u0026#34;: \u0026#34;value\u0026#34; }, \u0026#34;tag_name\u0026#34;: \u0026#34;li\u0026#34;, \u0026#34;wrapper\u0026#34; : \u0026#34;ul\u0026#34; }); get_element\r#\rGet a element from the dom based on a query or element.\nproperty description required element element or query selector true target where the result is copied too false json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;get_element\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34;, \u0026#34;target\u0026#34; : \u0026#34;$context.element\u0026#34; } } javascript\ncrs.call(\u0026#34;dom\u0026#34;, \u0026#34;get_element\u0026#34;, { \u0026#34;element\u0026#34;: \u0026#34;#element\u0026#34; }); get_animation_layer\r#\rThere can only be one animation layer.\nThis function either creates it for you if it does not exist or returns the existing one.\nThe animation layer is full screen and does not accept pointer events.\nThe only parameter is the standard \u0026ldquo;target\u0026rdquo; parmaeter\njson \u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;get_animation_layer\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;target\u0026#34; : \u0026#34;$context.layer\u0026#34; } }\njavascript\nconst layer = crs.call(\u0026#34;dom\u0026#34;, \u0026#34;get_animation_layer\u0026#34;); clear_animation_layer\r#\rIf the animation layer exists clear it of all children.\njson \u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;clear_animation_layer\u0026#34;, }\njavascript\nconst layer = crs.call(\u0026#34;dom\u0026#34;, \u0026#34;clear_animation_layer\u0026#34;); remove_animation_layer\r#\rRemove the animation layer from the dom.\njson \u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;remove_animation_layer\u0026#34;, }\njavascript\nconst layer = crs.call(\u0026#34;dom\u0026#34;, \u0026#34;remove_animation_layer\u0026#34;); highlight\r#\rThis feature creates a highlight region around a defined element.\nThis can be either a standard styled div or an instance of a template.\nIf you do use a template it is important that you only have one child as this child will be sized to the size of the highlighted element. A highlight can be permanent until you clear the animation layer or, you can define its timeout by setting the delay.\nI can use this with a existing animation layer but, you don\u0026rsquo;t need to. Once you call this it will first create the animation layer if it does not already exist. It will however not automatically remove the animation layer once done.\nproperty description required default target element or query selector true classes array of css classes to use on hightlight element false duration how long must the highlight show for (0 = infinite) false 0 template if you want a custom UI, pass this on via the false json \u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dom\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;highlight\u0026#34;, \u0026#34;args\u0026#34;: { target: event.target, classes: [\u0026#34;highlight\u0026#34;], duration: 500, template: template } }\njs\nawait crs.call(\u0026#34;dom\u0026#34;, \u0026#34;highlight\u0026#34;, { target: event.target, classes: [\u0026#34;highlight\u0026#34;], duration: 500, template: template }) "},{"id":12,"href":"/docs/systems/files/","title":"Files","section":"Docs","content":"\rFiles\r#\rLoading and saving files\nActions\r#\rload save save_canvas load\r#\rLaunch the file selection dialog, select files and return file information including a bite array of content. The result is an array of objects with the following properties:\nname - file name ext - file extension type - the type of file value - array buffer (file content) properties\nproperty description required dialog set true of you want to launch the file select dialog false files list of file URL to fetch false json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;files\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;load\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;dialog\u0026#34;: true } } javascript\nlet data = await crs.call(\u0026#34;files\u0026#34;, \u0026#34;load\u0026#34;, { dialog: true }) save\r#\rSave file content by downloading it in the browser.\nThis has only one property called \u0026ldquo;details\u0026rdquo;. This must be the same structure as you would have gotten from the load function. See load for more details.\nThis action will cause a download of the file allowing you to save it to the current machine.\njson\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;files\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;save\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;details\u0026#34;: \u0026#34;$context.details\u0026#34; } } javascript\nawait crs.call(\u0026#34;files\u0026#34;, \u0026#34;save\u0026#34;, { details: data }) save_canvas\r#\rSave a canvas element\u0026rsquo;s drawing as a image to your local system using the browsers download feature.\nproperties\nproperty description required default source canvas element true name name to use on download file false \u0026ldquo;image\u0026rdquo; json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;files\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;save_canvas\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;source\u0026#34;: \u0026#34;$context.canvasElement\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;my_image\u0026#34; } } javascript\nawait crs.call(\u0026#34;files\u0026#34;, \u0026#34;save_canvas\u0026#34;, {\u0026#34;source\u0026#34;: canvasElement}); "},{"id":13,"href":"/docs/systems/loop/","title":"Loop","section":"Docs","content":"\rLoop\r#\rLooping allows you to implement a for loop through an array.\nThere are a number of exceptions to how the normal system works.\nThe loop step is defined by setting the type to \u0026ldquo;loop\u0026rdquo; but does not have any action property.\nThere are two required arguments for the loop action.\nsource - the array to loop through steps - the steps to execute on each record basic loop structure { \u0026#34;type\u0026#34;: \u0026#34;loop\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;source\u0026#34;: \u0026#34;$context.records\u0026#34;, \u0026#34;steps\u0026#34;: { // ... steps to execute on each record } } }\nNB: during the loop, the current record is defined as \u0026ldquo;$item\u0026rdquo;.\nIn a loop action, it\u0026rsquo;s steps are executed in sequence of how it is defined.\nConsider the following array structure:\ncontext.records = [ { value: 10 }, { value: 20 }, { value: 30 } ] When you want to access the property \u0026ldquo;value\u0026rdquo; on \u0026ldquo;$item\u0026rdquo; you would access it using the path expression \u0026ldquo;$item.value\u0026rdquo;\nLoop example\r#\rLoop through an array of records.\nGet the value of each item.\nIf the value is less or equal to 20 add it to the low_items array.\nIf it is greater, add it to the high_items array.\n{ \u0026#34;result\u0026#34;: { low_items: [], high_items: [] }, \u0026#34;steps\u0026#34;: { \u0026#34;start\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;loop\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;source\u0026#34;: \u0026#34;$context.records\u0026#34;, \u0026#34;steps\u0026#34;: { \u0026#34;small_check\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;condition\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;condition\u0026#34;: \u0026#34;$item.value \u0026lt;= 20\u0026#34;, \u0026#34;pass_step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;add\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;target\u0026#34;: \u0026#34;$process.result.low_items\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;$item\u0026#34; } } } }, \u0026#34;large_check\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;condition\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;condition\u0026#34;: \u0026#34;$item.value \u0026gt; 20\u0026#34;, \u0026#34;pass_step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;add\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;target\u0026#34;: \u0026#34;$process.result.high_items\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;$item\u0026#34; } } } } } } next_step: \u0026#34;done\u0026#34; }, \u0026#34;done\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;console\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;log\u0026#34;, \u0026#34;args\u0026#34;: { messages: [\u0026#34;$process.result.low_items\u0026#34;, \u0026#34;$process.result.high_items\u0026#34;] } } } } \u0026ldquo;small_check\u0026rdquo; will execute first because it was defined first.\n\u0026ldquo;large_check\u0026rdquo; will be executed after that.\nAt the end of the process we log the two different arrays.\n"},{"id":14,"href":"/docs/systems/math/","title":"Math","section":"Docs","content":"\rMath\r#\rThis allows you to run math operations.\nThere are a number of standard functions that process two values.\nadd subtract multiply divide In javascript you should just the normal math functions.\nThis module is aimed specifically to do math operations as part of a schema process.\nEach of the above operations has the following properties.\nproperty description required value1 number true value2 number true target where to copy the result true For example\nstep: { type: \u0026#34;math\u0026#34;, action: \u0026#34;subtract\u0026#34;, args: { value1: 10, value2: 11, target: \u0026#34;$process.result\u0026#34; } } You can also execute any function on the javascript Math object.\nFor this you need to define two properties.\nproperty description required value array of values to send to math function true target where to copy the result true The value argument will differ from function to function.\nThe \u0026ldquo;Math.sin\u0026rdquo; function only has one parameter for the angle.\nstep: { type: \u0026#34;math\u0026#34;, action: \u0026#34;sin\u0026#34;, args: { value: [90], target: \u0026#34;$process.result\u0026#34; } } \u0026ldquo;Math.max\u0026rdquo; on the other hand has two parameters, one for the min and another for max value.\nstep: { type: \u0026#34;math\u0026#34;, action: \u0026#34;max\u0026#34;, args: { value: [\u0026#34;$process.data.max\u0026#34;, 90], target: \u0026#34;$process.data.max\u0026#34; } } "},{"id":15,"href":"/docs/systems/object/","title":"Object","section":"Docs","content":"\rObject\r#\rThis will allow you to work with objects.\nBe it getting or setting values, making copies or cloning.\nActions\r#\rset get delete copy_on_path create assign clone json_clone assert set\r#\rSet properties on objects from a base object be it the context, process or item.\nOne of these must be provided.\nThe properties object is a object literal where the property name is the path and the value, the value to set.\nproperties\nproperty description required properties the properties and values to set true json \u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;set\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;properties\u0026#34;: { \u0026#34;$context.value\u0026#34;: \u0026#34;hello world\u0026#34;, \u0026#34;$item.subObj.value\u0026#34;: \u0026#34;$context.value.toUpperCase()\u0026#34; } } }\njs await crs.call(\u0026#34;object\u0026#34;, \u0026#34;set\u0026#34;, { \u0026#34;properties\u0026#34;: { \u0026#34;$context.value\u0026#34;: \u0026#34;hello world\u0026#34;, \u0026#34;$item.subObj.value\u0026#34;: \u0026#34;$context.value.toUpperCase()\u0026#34; }, context, process, item)\nNB: if you dont define \u0026ldquo;$context\u0026rdquo; or \u0026ldquo;$process\u0026rdquo; or \u0026ldquo;$item\u0026rdquo;, \u0026ldquo;$context\u0026rdquo; is assumed.\nFor example \u0026ldquo;value\u0026rdquo; = \u0026ldquo;$context.value\u0026rdquo;.\nThis means that you must pass the object you want to make changes to as the context.\nget\r#\rGet a single or batch of values from object paths using either, context, process or item.\nproperties\nproperty description required properties array of paths to get values of true target where to copy the values false json \u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;get\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;properties\u0026#34;: [ \u0026#34;value\u0026#34;, \u0026#34;subObj/value\u0026#34; ] } }\njs const results = await crs.call(\u0026#34;object\u0026#34;, \u0026#34;get\u0026#34;, { properties: [ \u0026#34;value\u0026#34;, // assumed context \u0026#34;$context/value\u0026#34;, // explicit context \u0026#34;subobj?/value\u0026#34;, // conditional path expression \u0026#34;subObj/value\u0026#34; // assumed context with sub objects ] }, context)\ndelete\r#\rDelete properties on paths be it context, process or item.\nproperties\nproperty description required properties array of paths to delete true json \u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;delete\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;properties\u0026#34;: [ \u0026#34;value\u0026#34;, \u0026#34;subObj/value\u0026#34; ] } }\njs const results = await crs.call(\u0026#34;object\u0026#34;, \u0026#34;delete\u0026#34;, { properties: [ \u0026#34;value\u0026#34;,\u0026#34;subObj/value\u0026#34;] }, context)\ncopy_on_path\r#\rCopy the values of one object to another object.\nproperties\nproperty description required source object to copy the values from true target object to copy the values too true properties array of property paths to copy true json \u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;copy_on_path\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;source\u0026#34;: \u0026#34;$context.obj1\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;$context.obj2\u0026#34;, \u0026#34;properties\u0026#34;: [ \u0026#34;value\u0026#34;, \u0026#34;subObj/value\u0026#34; ] } }\njs await crs.call(\u0026#34;object\u0026#34;, \u0026#34;copy_on_path\u0026#34;, { source: obj, target: obj2, properties: [\u0026#34;subObj/value1\u0026#34;] })\ncreate\r#\rCreate an object literal on the target item.\nIn javascript just use the normal object literal syntax but this allows you to do the same in a schema.\njson \u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;create\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;target\u0026#34;: \u0026#34;$context.obj2\u0026#34; } }\nassign\r#\rAssign the properties of one object to another.\nThis allows the Object.assign feature in schemas.\nproperties\nproperty description required source object to copy the values from true target object to copy the values too true json \u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;assign\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;source\u0026#34;: \u0026#34;$context.obj1\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;$context.obj2\u0026#34; } }\nclone\r#\rCreate a clone of an object by creating a new object literal and copying either all or a subset of properties from the source. If target is defined (in schema should be) the new object is attached to that target.\nIf no properties are defined, all fields will be copied over.\nNB: these are shallow copies and does not support paths.\nproperties\nproperty description required source object to copy the values from true target object to copy the values too false properties array of fields to copy false json \u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;clone\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;source\u0026#34;: \u0026#34;$context.obj1\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;$context\u0026#34;, \u0026#34;properties\u0026#34;: [\u0026#34;id\u0026#34;, \u0026#34;code\u0026#34;, \u0026#34;description\u0026#34;] } }\njs const clone = await crs.call(\u0026#34;object\u0026#34;, \u0026#34;clone\u0026#34;, { source: obj, properties: [\u0026#34;id\u0026#34;, \u0026#34;copy\u0026#34;, \u0026#34;description\u0026#34;] })\njson_clone\r#\rThis clone function makes an exact copy of the object including paths using JSON parsing.\nThis is the preferred clone function for deep cloning objects. If the target is defined the new object will be set on the target path.\nproperties\nproperty description required source object to copy the values from true target object to copy the values too false json \u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;json_clone\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;source\u0026#34;: \u0026#34;$context.obj1\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;$context.obj2\u0026#34; } }\njs const clone = await crs.call(\u0026#34;object\u0026#34;, \u0026#34;json_clone\u0026#34;, { source: obj })\nassert\r#\rAssert that the source object properties has a value not null or undefined.\nIf either the source object or any of the properties defined is null the result will be false. Properties is an array of paths, thus you can check sub object\u0026rsquo;s values.\nproperties\nproperty description required source object to copy the values from true properties properties to check true target object to copy the values too false json \u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;assert\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;source\u0026#34;: \u0026#34;$context.obj1\u0026#34;, \u0026#34;properties\u0026#34;: [\u0026#34;property1\u0026#34;, \u0026#34;subObj/value\u0026#34;], \u0026#34;target\u0026#34;: \u0026#34;$context.isValid\u0026#34; } }\njs const isValid = await crs.call(\u0026#34;object\u0026#34;, \u0026#34;assert\u0026#34;, { source: obj properties: [\u0026#34;property1\u0026#34;, \u0026#34;subObj/value\u0026#34;], })\n"},{"id":16,"href":"/docs/systems/process/","title":"Process","section":"Docs","content":"\rProcess\r#\rThis allows you to call processes as a step within a different process.\nSub processes are mainly a schema feature.\nThe step has some basic requirements\naction name of the process to execute schema name that the process is in step: { type: \u0026#34;process\u0026#34;, action: \u0026#34;create_ui\u0026#34;, args: { schema: \u0026#34;dom-example\u0026#34;, parameters: { \u0026#34;key\u0026#34;: \u0026#34;value\u0026#34; } }, next_step: \u0026#34;set_attributes\u0026#34; } Processes can have input to those processes called parameters.\nYou can pass the parameters to the process you are calling by setting a parameters\u0026rsquo; property on the args object.\n"},{"id":17,"href":"/docs/systems/random/","title":"Random","section":"Docs","content":"\rRandom\r#\rCreate random numbers using either integer or float functions. Though you can call this from both schema and code, it is mostly used from code. Both functions you can provide a standard target path in the args so you can call it from schema if you need.\njson\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;random\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;integer\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;target\u0026#34;: \u0026#34;$context.value\u0026#34; } } js const value = crs.call(\u0026#34;random\u0026#34;, \u0026#34;integer\u0026#34;);\n"},{"id":18,"href":"/docs/systems/session-storage/","title":"Session Storage","section":"Docs","content":"\rSession Storage\r#\r"},{"id":19,"href":"/docs/systems/storage/","title":"Storage","section":"Docs","content":"\rStorage\r#\r"},{"id":20,"href":"/docs/systems/string/","title":"String","section":"Docs","content":"\rString\r#\rFunctions that help you interact with strings\nActions\r#\rinflate to_array from_array replace inflate\r#\rConsidering the following string examples, inflate the strings with values.\ntemplates example const str1 = \u0026#34;#input/${id}?type=\u0026#39;tasks\u0026#39;\u0026amp;typeId=\u0026#39;${typeId}\u0026#39;\u0026#34;; const str2 = \u0026#34;${firstName} ${lastName} = ${age} old\u0026#34;;\nproperties\nproperty description required template string that contains the inflation markers true parameters object who\u0026rsquo;s properties will be used in the inflation true target where the inflated string must be copied too false json { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;inflate\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;template\u0026#34;: \u0026#34;#input/${id}?type=\u0026#39;tasks\u0026#39;\u0026amp;typeId=\u0026#39;${typeId}\u0026#39;\u0026#34;, \u0026#34;parameters\u0026#34;: { \u0026#34;id\u0026#34;: 100, \u0026#34;typeId\u0026#34;: \u0026#34;$context.typeId\u0026#34; }, \u0026#34;target\u0026#34;: \u0026#34;$context.result\u0026#34; } }\njs const inflated = crs.call(\u0026#34;string\u0026#34;, \u0026#34;inflate\u0026#34;, { \u0026#34;template\u0026#34;: \u0026#34;#input/${id}?type=\u0026#39;tasks\u0026#39;\u0026amp;typeId=\u0026#39;${typeId}\u0026#39;\u0026#34;, \u0026#34;parameters\u0026#34;: { \u0026#34;id\u0026#34;: 100, \u0026#34;typeId\u0026#34;: \u0026#34;$context.typeId\u0026#34; } }, context)\nto_array\r#\rThis is a feature geared towards schemas.\nThis provides you with the string split function. In coding, rather just use the string split function.\nThis function will return an array\nproperties\nproperty description required source string to split true pattern pattern char to do the split on true target where the inflated string must be copied too false json { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;to_array\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;source\u0026#34;: \u0026#34;$context.value\u0026#34;, \u0026#34;pattern\u0026#34;: \u0026#34;,\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;$context.target\u0026#34; } }\nfrom_array\r#\rThis is the opposite of to_array where you start with an array but get a string back.\nThis provides you with the join ability.\nproperties\nproperty description required default source array of values true separator char used in joining the array values true \u0026quot;\u0026quot; target where the string must be copied too false json { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;from_array\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;source\u0026#34;: \u0026#34;$context.value\u0026#34;, \u0026#34;separator\u0026#34;: \u0026#34;,\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;$context.target\u0026#34; } }\nThe above example will return a comma seperated string based on the array values.\nreplace\r#\rGiven a string, replace string values based on the pattern defined.\nThis function will replace all instances of the pattern found.\nproperties\nproperty description required source array of values true pattern pattern to search for true value where the string must be copied too true json\n{ \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;source\u0026#34;: \u0026#34;$context.value\u0026#34;, \u0026#34;pattern\u0026#34;: \u0026#34;old\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;new\u0026#34; } } js\nconst newValue = crs.call(\u0026#34;string\u0026#34;, \u0026#34;replace\u0026#34;, { \u0026#34;source\u0026#34;: \u0026#34;hello old world\u0026#34;, \u0026#34;pattern\u0026#34;: \u0026#34;old\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;new\u0026#34; }) "},{"id":21,"href":"/docs/systems/system/","title":"System","section":"Docs","content":"\rSystem\r#\rThis contains system or environmental functions.\nActions\r#\rcopy_to_clipboard sleep pause resume abort is_mobile is_portrait is_landscape copy_to_clipboard\r#\rCopy a given value to clipboard for system paste functions.\nproperties\nproperty description required source value to add to the clipboard true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;system\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;copy_to_clipboard\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;source\u0026#34;: \u0026#34;$context.value\u0026#34;, } } javascript\nawait crs.call(\u0026#34;array\u0026#34;, \u0026#34;copy_to_clipboard\u0026#34;, { source: \u0026#34;hello world\u0026#34; }); sleep\r#\rSet a delay before executing further.\nThis is typically used for testing purposes.\nIdeally you should not use this in operational processes.\nproperties\nproperty description required duration milliseconds to delay with true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;system\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;sleep\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;duration\u0026#34;: 100, } } javascript\nawait crs.call(\u0026#34;array\u0026#34;, \u0026#34;sleep\u0026#34;, { duration: 100 }); pause\r#\rPause a running process, waiting for other input before continuing. This is most often used to pause a process while getting user input via an async form. The process\u0026rsquo;s status is set to \u0026ldquo;wait\u0026rdquo;\nA \u0026ldquo;resume\u0026rdquo; function is attached to the process to continue when needed.\njson\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;system\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;pause\u0026#34; } javascript\nawait crs.call(\u0026#34;array\u0026#34;, \u0026#34;pause\u0026#34;); resume\r#\rThis will call the resume function that was created during the pause operation.\nFrom this point forward the process will run as normal again.\njson\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;system\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;resume\u0026#34; } javascript\nawait crs.call(\u0026#34;array\u0026#34;, \u0026#34;resume\u0026#34;); abort\r#\rGiven an error property, throw a new error with that as the message.\njson\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;system\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;abort\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;error\u0026#34;: \u0026#34;oops something went wrong\u0026#34; } } javascript\nawait crs.call(\u0026#34;array\u0026#34;, \u0026#34;resume\u0026#34;, { \u0026#34;error\u0026#34;: \u0026#34;oops something went wrong\u0026#34; }); is_mobile\r#\rCheck if the device is a mobile device and if so, return true else false\njson\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;system\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;is_mobile\u0026#34; } javascript\nconst result = await crs.call(\u0026#34;array\u0026#34;, \u0026#34;is_mobile\u0026#34;); is_portrait\r#\rCheck if a device\u0026rsquo;s orientation is portrait and if so, return true else false\njson\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;system\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;is_portrait\u0026#34; } javascript\nconst result = await crs.call(\u0026#34;array\u0026#34;, \u0026#34;is_portrait\u0026#34;); is_landscape\r#\rCheck if a device\u0026rsquo;s orientation is landscape and if so, return true else false\njson\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;system\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;is_landscape\u0026#34; } javascript\nconst result = await crs.call(\u0026#34;array\u0026#34;, \u0026#34;is_landscape\u0026#34;); "},{"id":22,"href":"/docs/systems/translation/","title":"Translation","section":"Docs","content":"\rTranslation\r#\rUse the binding engine\u0026rsquo;s translation features as part of your process or code.\nRead the crsbinding translation documentation.\nActions\r#\radd get delete translate_elements format add\r#\rAdd translation values to the binding engine for use.\nproperties\nproperty description required translations translations object to add true context context name to use for translation true The context is important if you want to delete translations when you are done with it.\nThe context is used to identify what to delete.\nThe context should be unique.\njson\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;translations\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;add\u0026#34;, \u0026#34;step\u0026#34;: { \u0026#34;translations\u0026#34;: { \u0026#34;buttons\u0026#34;: { \u0026#34;save\u0026#34;: \u0026#34;Save\u0026#34; \u0026#34;new\u0026#34;: \u0026#34;New\u0026#34; } }, \u0026#34;context\u0026#34;: \u0026#34;buttons\u0026#34; } } javascript\nconst result = await crs.call(\u0026#34;translations\u0026#34;, \u0026#34;add\u0026#34;, {\u0026#34;translations\u0026#34;: { \u0026#34;buttons\u0026#34;: { \u0026#34;save\u0026#34;: \u0026#34;Save\u0026#34; \u0026#34;new\u0026#34;: \u0026#34;New\u0026#34; } }); get\r#\rGet translation values from the binding engine.\nproperties\nproperty description required key what translation value to get true target where to copy that value too false json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;translations\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;get\u0026#34;, \u0026#34;step\u0026#34;: { \u0026#34;key\u0026#34;: \u0026#34;buttons/save\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;$context.value\u0026#34; } } javascript\nconst result = await crs.call(\u0026#34;translations\u0026#34;, \u0026#34;get\u0026#34;, { \u0026#34;key\u0026#34;: \u0026#34;buttons/save\u0026#34; }); delete\r#\rDelete translation objects from binding engine.\nYou need to use the context used during the add operation.\nproperties\nproperty description required context context used during the add true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;translations\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;delete\u0026#34;, \u0026#34;step\u0026#34;: { \u0026#34;context\u0026#34;: \u0026#34;buttons\u0026#34; } } javascript\nconst result = await crs.call(\u0026#34;translations\u0026#34;, \u0026#34;delete\u0026#34;, { \u0026#34;context\u0026#34;: \u0026#34;buttons\u0026#34; }); translate_elements\r#\rPerform translation inflation on a HTMLElement and replace translation markup with translation values.\nRead the html documentation for details. The bottom line is that when you have a HTMLElement that contains translation markup and you want to bring in the values, this is the function to use.\nproperties\nproperty description required element element to translate true json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;translations\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;translate_elements\u0026#34;, \u0026#34;step\u0026#34;: { \u0026#34;element\u0026#34;: \u0026#34;#target\u0026#34; } } javascript\nawait crs.call(\u0026#34;translations\u0026#34;, \u0026#34;translate_elements\u0026#34;, { element: element }); format\r#\rYou can have a format string in the translations.\nError messages being a example of that.\nYou can have some base text and then some values you want to inflate in there.\nFor example: \u0026quot;User should be older than ${age}\u0026quot;\nYou want to translate the text but have the inflation markers in place to inject values from the data. This function allows you to do that.\nGet the string from the translations based on the key provided and then inflate it with values.\nproperties\nproperty description required key translation key to use true parameters object that contains the translation keys. true target where to copy the result too false json\n\u0026#34;step\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;translations\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;format\u0026#34;, \u0026#34;step\u0026#34;: { \u0026#34;key\u0026#34;: \u0026#34;messages/age_error\u0026#34;, \u0026#34;parameters\u0026#34;: { \u0026#34;age\u0026#34;: 20 }, \u0026#34;target\u0026#34;: \u0026#34;$context.result\u0026#34; } } javascript\nawait crs.call(\u0026#34;translations\u0026#34;, \u0026#34;format\u0026#34;, { key: \u0026#34;messages/age_error\u0026#34;, parameters: { age: 20 } }); "}]