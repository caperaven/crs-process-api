import"./binding-actions.js";class i{static async perform(a,r,s,t){await this[a.action]?.(a,r,s,t)}static async hex_to_rgb(a,r,s,t){const c=await crs.process.getValue(a.args.normalized,r,s,t)||!1,l=await crs.process.getValue(a.args.hex,r,s,t),e=u(l);return c==!0,a.args.target!=null&&await crs.process.setValue(a.args.value,e,r,s,t),e}static async rgb_to_hex(a,r,s,t){const c=await crs.process.getValue(a.args.r,r,s,t)||0,l=await crs.process.getValue(a.args.g,r,s,t)||0,e=await crs.process.getValue(a.args.b,r,s,t)||0,f=await crs.process.getValue(a.args.normalized,r,s,t)||!1,g=`#${o(c)}${o(l)}${o(e)}`;return a.args.target!=null&&await crs.process.setValue(a.args.value,g,r,s,t),g}}function o(n){const a=n.toString(16);return a.length==1?"0"+a:a}function u(n,a){const r=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(n);return r?{r:parseInt(r[1],16),g:parseInt(r[2],16),b:parseInt(r[3],16)}:null}crs.intent.colors=i;export{i as ColorsActions};
